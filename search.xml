<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue3.2</title>
      <link href="/post/b48e2494.html"/>
      <url>/post/b48e2494.html</url>
      
        <content type="html"><![CDATA[<h3 id="vue3-2-setup语法糖"><a href="#vue3-2-setup语法糖" class="headerlink" title="vue3.2 setup语法糖"></a>vue3.2 setup语法糖</h3><p><img src=""></p><ol><li>main.js</li></ol><p>通过按需导入 createApp方法来构建vue实例</p><p>使用vue.use（）来挂载方法、插件</p><ol start="2"><li>template</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;标签可以支持多个根标签</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>vuex</li></ol><p>通过createStore方法构建store实例</p><ol start="4"><li>router</li></ol><p>通过按需导入createRouter方法来构建router实例</p><p>通过按需导入createWebHashHistory来构建hash模式对象，进行路由模式的导入</p><p>使用Proxy来代替Object.defineProperty(),解决了不能检测数组和对象变化 的限制</p><p>scss</p><p>sass预处理器使用::v-deep深度选择器抛出如下警告</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20221004110752748.png" alt="image-20221004110752748"></p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//  原因</span><br><span class="line">::deep已经被vue3废弃</span><br><span class="line">使用 ：<span class="built_in">deep</span>(.类名) </span><br></pre></td></tr></tbody></table></figure><p>去除el-input的默认边框</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.el-input__wrapper</span> {</span><br><span class="line">                <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">                <span class="attribute">background-color</span>: transparent;</span><br><span class="line">                <span class="attribute">border</span>: none <span class="meta">!important</span>;</span><br><span class="line">                <span class="attribute">box-shadow</span>: none <span class="meta">!important</span>;</span><br><span class="line">                <span class="attribute">padding</span>: <span class="number">0px</span>; //前边边距去掉</span><br><span class="line">            }</span><br></pre></td></tr></tbody></table></figure><p>vue3获取dom的方法</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"icon-box"</span> ref=<span class="string">"menu_item"</span>&gt;&lt;/div&gt; </span><br><span class="line"><span class="keyword">const</span> menu_item = <span class="title function_">ref</span>();</span><br></pre></td></tr></tbody></table></figure><p> vue3.2 父组件触发子组件方法</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件中</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Show</span> = (<span class="params">event:<span class="built_in">any</span></span>) =&gt; {</span><br><span class="line">    <span class="comment">//event接收参数</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(event,<span class="string">'我被父组件调用了'</span>);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//暴露</span></span><br><span class="line"><span class="title function_">defineExpose</span>({ <span class="title class_">Show</span> })</span><br><span class="line"></span><br><span class="line"><span class="comment">//父组件中</span></span><br><span class="line">    &lt;<span class="title class_">Son</span> ref=<span class="string">"son"</span>&gt;&lt;/<span class="title class_">Son</span>&gt;</span><br><span class="line"><span class="comment">//获取子组件实例</span></span><br><span class="line"><span class="keyword">const</span> son=<span class="title function_">ref</span>()</span><br><span class="line"><span class="comment">//直接调用</span></span><br><span class="line">son.<span class="property">value</span>.<span class="title class_">Show</span>(a,b)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 操作指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-九州词诗词网站</title>
      <link href="/post/4009de77.html"/>
      <url>/post/4009de77.html</url>
      
        <content type="html"><![CDATA[<h4 id="前端技术栈"><a href="#前端技术栈" class="headerlink" title="前端技术栈"></a>前端技术栈</h4><ul><li>vue3.2 setup语法糖</li><li>TypeScript</li><li>Pinia</li><li>vite</li><li>axios</li></ul><h4 id="后端技术栈"><a href="#后端技术栈" class="headerlink" title="后端技术栈"></a>后端技术栈</h4><ul><li><p>express</p></li><li><p>mysql8.0</p></li></ul><h3 id="通用组件"><a href="#通用组件" class="headerlink" title="通用组件"></a>通用组件</h3><p>header 顶部栏</p><p>footer  底部栏</p><h3 id="项目页面"><a href="#项目页面" class="headerlink" title="项目页面"></a>项目页面</h3><p>home 首页</p><p>poetryDetail 诗歌详情</p><p>dynastyCategory 朝代分类 （诗歌分类的子页面） </p><p>tattle 杂谈专区</p><p>about 关于</p><p>poetryCreate 诗歌创作</p><p>login 登陆</p><p>sign 注册</p><h3 id="数据库表设计"><a href="#数据库表设计" class="headerlink" title="数据库表设计"></a>数据库表设计</h3><p>作者表：<code>lv_writing_authors</code></p><table><thead><tr><th>id</th><th>诗人id</th><th></th></tr></thead><tbody><tr><td>name</td><td>诗人姓名</td><td>繁</td></tr><tr><td>birth_year</td><td>出生年份</td><td></td></tr><tr><td>death_year</td><td>死亡年份</td><td></td></tr><tr><td>desc</td><td>描述</td><td>繁</td></tr><tr><td>dynasty_id</td><td>朝代id</td><td></td></tr><tr><td>dynasty</td><td>朝代</td><td>繁</td></tr><tr><td>works_count</td><td>作品数量</td><td></td></tr></tbody></table><p>朝代表：<code>lv_writing_dynasty</code></p><table><thead><tr><th>id</th><th>朝代id</th><th></th></tr></thead><tbody><tr><td>name</td><td>朝代名字</td><td>繁</td></tr><tr><td>content</td><td>内容</td><td>繁</td></tr></tbody></table><p>作品表：<code>lv_writing_works</code></p><table><thead><tr><th>id</th><th>作品id</th><th></th></tr></thead><tbody><tr><td>title</td><td>作品标题</td><td>繁</td></tr><tr><td>author_id</td><td>作者id</td><td></td></tr><tr><td>author</td><td>作者</td><td>繁</td></tr><tr><td>dynasty_id</td><td>朝代id</td><td></td></tr><tr><td>dynasty</td><td>朝代</td><td>繁</td></tr><tr><td>kind_cn</td><td>体裁</td><td>繁</td></tr><tr><td>content</td><td>内容</td><td>繁</td></tr><tr><td>intro</td><td>评析</td><td>繁</td></tr><tr><td>annotation</td><td>注释</td><td>繁</td></tr><tr><td>translation</td><td>译文</td><td>繁</td></tr><tr><td>master_comment</td><td>辑评</td><td>繁</td></tr><tr><td>quote</td><td>名句</td><td>繁</td></tr></tbody></table><p>字体使用 汇文明朝体</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @chinese-fonts/hwmct</span><br></pre></td></tr></tbody></table></figure><h3 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h3><ol><li>使用 arco design  标签tag 实现搜索历史记录 </li><li>使用 卡片card 承载选项卡</li><li>路由跳转</li><li>完成静态页面的数据展示 </li></ol><p>数据库词条 57w </p><p>请求过慢，添加索引</p>]]></content>
      
      
      <categories>
          
          <category> 操作指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> vue3 </tag>
            
            <tag> 毕业设计 </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网页设计</title>
      <link href="/post/abcdfc3f.html"/>
      <url>/post/abcdfc3f.html</url>
      
        <content type="html"><![CDATA[<h1 id="网页设计"><a href="#网页设计" class="headerlink" title="网页设计"></a>网页设计</h1><p><img src=""></p><h2 id="网页类型："><a href="#网页类型：" class="headerlink" title="网页类型："></a>网页类型：</h2><ol><li>信息展示     ——多动效</li><li>功能服务     ——交互多、行业化、注重细节</li><li>门户平台（综合）   —— 紧凑、层级复杂</li><li>电商外贸   ——通用性、流程化、逻辑清晰</li><li>营销活动型  ——视觉冲击、花里胡哨、抓眼球、卖点明确</li><li>系统管理型网页 ——注重实用性、专业场景、模块化、线上软件</li></ol><h2 id="响应式和栅格"><a href="#响应式和栅格" class="headerlink" title="响应式和栅格"></a>响应式和栅格</h2><p>响应式：同一套设计元素，网页根据显示<code>宽度</code>自动调整内容的模式，多用于图片多文字少的网站。</p><p>自适应：更根据不同设备设计不同的样式适配。</p><p>栅格系统：将页面等比切分为 margin，栅格，栅格间距</p><p>在响应式时，栅格区域大小随页面宽度改变，间距和margin则不变</p><h2 id="网页设计规范"><a href="#网页设计规范" class="headerlink" title="网页设计规范"></a>网页设计规范</h2><h3 id="网页文字规范"><a href="#网页文字规范" class="headerlink" title="网页文字规范"></a>网页文字规范</h3><p>浏览器显示的字体需要客户端本地安装过的字体才可以正常显示</p><p>一般默认微软雅黑 （windows为主）</p><ol><li><p>字号</p><p>中文最小字号：12px</p><p>常规：13-15px</p><p>较大：15-20px</p></li><li><p>字重：</p><p>​    light：注释/次要文本   </p><p>​    regular：正常</p><p>​    bold：强调/标题</p></li><li><p>字色</p></li><li><p>行高</p></li></ol><p>​        阅读文本：字号的1.6-2倍</p><p>​        注释文本：字号的1.4-1.6倍</p><ol start="5"><li><p>段间距</p><p>行高的0.4-0.8倍</p></li></ol><h3 id="网页色彩规范"><a href="#网页色彩规范" class="headerlink" title="网页色彩规范"></a>网页色彩规范</h3><p>浏览器使用rgb模式</p><h3 id="网页图标规范"><a href="#网页图标规范" class="headerlink" title="网页图标规范"></a>网页图标规范</h3><p>大小一致，风格一致，粗细一致，透视一致</p><h3 id="网页布局规范"><a href="#网页布局规范" class="headerlink" title="网页布局规范"></a>网页布局规范</h3><p>一边使用4和8的倍数来制定空间尺寸。</p><p>通过亲密性原则使用不同等级的间距数值，一般也是4和8的倍数</p><h2 id="长屏展示页面"><a href="#长屏展示页面" class="headerlink" title="长屏展示页面"></a>长屏展示页面</h2><p>用户对迷宫般的网站缺乏耐心和访问意愿，越来越多的网页采取长屏来展示内容，将本来需要多页面展示的内容聚合到一页</p><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ol><li>信息展示为主</li><li>平面设计感强</li><li>动效应用少</li><li>固定版心 （一般1100-1200）</li><li>配图要求高</li></ol><h4 id="设计流程："><a href="#设计流程：" class="headerlink" title="设计流程："></a>设计流程：</h4><ol><li>需求获取</li><li>模块分析</li><li>原型制作</li><li>视觉填充</li><li>包装输出</li></ol><h3 id="风格统一"><a href="#风格统一" class="headerlink" title="风格统一"></a>风格统一</h3><p>字体、字号统一</p><p>组件尽量复用</p><p>阅读区行距、段距尽量统一，利于读者阅读</p><p>尽可能少的使用固定颜色设计</p><p>标题颜色使用hsb赋予不同色阶，分别使用在重要性强弱的文本上，形成分级</p>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-i18n 国际化</title>
      <link href="/post/2349de77.html"/>
      <url>/post/2349de77.html</url>
      
        <content type="html"><![CDATA[<h2 id="项目使用vue-i18n实现-国际化"><a href="#项目使用vue-i18n实现-国际化" class="headerlink" title="项目使用vue-i18n实现 国际化"></a>项目使用vue-i18n实现 国际化</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm  i vue-i18n@next</span><br></pre></td></tr></tbody></table></figure><p>在src下新建/language/i18n.ts文件 以及对应的语言文件zh.ts和en.ts</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { createI18n } <span class="keyword">from</span> <span class="string">'vue-i18n'</span></span><br><span class="line"><span class="keyword">import</span> zh <span class="keyword">from</span> <span class="string">'./zh'</span></span><br><span class="line"><span class="keyword">import</span> en <span class="keyword">from</span> <span class="string">'./en'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i18n = <span class="title function_">createI18n</span>({</span><br><span class="line">    <span class="attr">legacy</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">locale</span>: <span class="string">'zh'</span>,</span><br><span class="line">    <span class="attr">messages</span>: {</span><br><span class="line">        zh,</span><br><span class="line">        en</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18n</span><br></pre></td></tr></tbody></table></figure><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//zh</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">   <span class="attr">footer</span>: {</span><br><span class="line">        <span class="attr">yu2Travel</span>: <span class="string">'玉玉游'</span>,</span><br><span class="line">        <span class="attr">discovery</span>: <span class="string">'发现'</span>,</span><br><span class="line">        <span class="attr">rent</span>: <span class="string">'出租'</span>,</span><br><span class="line">        <span class="attr">customerService</span>: <span class="string">'客服'</span>,</span><br><span class="line">    }</span><br><span class="line">} </span><br><span class="line"><span class="comment">//en</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">footer</span>: {</span><br><span class="line">        <span class="attr">yu2Travel</span>: <span class="string">'Yu2Travel'</span>,</span><br><span class="line">        <span class="attr">discovery</span>: <span class="string">'Discovery'</span>,</span><br><span class="line">        <span class="attr">rent</span>: <span class="string">'Rent'</span>,</span><br><span class="line">        <span class="attr">customerService</span>: <span class="string">'Customer Service'</span>,</span><br><span class="line">    }</span><br><span class="line">} </span><br></pre></td></tr></tbody></table></figure><p>main.ts 挂载</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">'./language/i18n'</span></span><br><span class="line">app.<span class="title function_">use</span>(i18n)</span><br></pre></td></tr></tbody></table></figure><p><code>使用</code></p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { useI18n } <span class="keyword">from</span> <span class="string">'vue-i18n'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> {t} = <span class="title function_">useI18n</span>()</span><br><span class="line"><span class="comment">//templa</span></span><br><span class="line">  {{ <span class="title function_">t</span>(<span class="string">'footer.yu2Travel'</span>)}}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> {locale}=<span class="title function_">useI18n</span>()</span><br><span class="line"><span class="comment">//定义函数修改值为en或zh</span></span><br><span class="line">locale.<span class="property">value</span> = en/zh</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在v-for中使用</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> footerMenu = <span class="title function_">reactive</span>([{</span><br><span class="line">        <span class="attr">title</span>: <span class="string">'yu2Travel'</span>,</span><br><span class="line">    },{</span><br><span class="line">    <span class="attr">title</span>: <span class="string">'discovery'</span>,</span><br><span class="line">    },{</span><br><span class="line">        <span class="attr">title</span>: <span class="string">'rent'</span>,</span><br><span class="line">    },{</span><br><span class="line">        <span class="attr">title</span>: <span class="string">'customerService'</span>,</span><br><span class="line">    }])</span><br><span class="line"><span class="comment">//footerMenu数组中,名称要和 en/zh文件中的名称对称</span></span><br><span class="line">&lt;li v-<span class="keyword">for</span>=<span class="string">"(item, i) in footerMenu"</span> :key=<span class="string">"i"</span>&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>{{ t(`footer['${item.title}']`) }}<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"> &lt;/li&gt;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 操作指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sass </tag>
            
            <tag> vue </tag>
            
            <tag> 国际化 </tag>
            
            <tag> vue-i18n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面经</title>
      <link href="/post/98e6f621.html"/>
      <url>/post/98e6f621.html</url>
      
        <content type="html"><![CDATA[<h2 id="for-和-forEach-的区别"><a href="#for-和-forEach-的区别" class="headerlink" title="for 和 forEach 的区别"></a>for 和 forEach 的区别</h2><ol><li>for可以使用break跳出循环，forEach不行</li><li>for可以设置循环的索引，而forEach必须循环所有</li></ol><h2 id="forEach-和-map-的区别"><a href="#forEach-和-map-的区别" class="headerlink" title="forEach 和 map 的区别"></a>forEach 和 map 的区别</h2><p>相同： 都只能遍历数组，都支持3个参数 ：item（当前每一项）、index（索引）、arr（原数组）</p><p>不同：map返回一个新数组；forEach返回值为undefined，直接在原数据上操作</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="find-和-some-的区别"><a href="#find-和-some-的区别" class="headerlink" title="find 和 some 的区别"></a>find 和 some 的区别</h2><p>find返回满足条件的第一项</p><p>findIndex，返回符合的第一项的index，找不到便返回-1</p><p>some找到符合条件的项后返回布尔值</p><h2 id="事件循环、宏任务、微任务"><a href="#事件循环、宏任务、微任务" class="headerlink" title="事件循环、宏任务、微任务"></a>事件循环、宏任务、微任务</h2><p>异步任务分为宏任务（由浏览器、node发起）和微任务（js引擎发起）</p><p>宏任务包括：script(整体代码)、setTimout、setInterval、setImmediate(node.js环境)、I/O、UI交互事件</p><p>微任务包括：new promise().then(回调)、MutationObserver(html5新特新)、Object.observe(已废弃)、process.nextTick（node环境</p><p> <strong>若同时存在promise和nextTick，则先执行nextTick</strong></p><ul><li>先执行同步代码，</li><li>遇到异步宏任务则将异步宏任务放入宏任务队列中，</li><li>遇到异步微任务则将异步微任务放入微任务队列中，</li><li>当所有同步代码执行完毕后，再将<strong>异步微任务</strong>从队列中调入主线程执行，</li><li>微任务执行完毕后再将异步宏任务从队列中调入主线程执行，</li><li>一直循环直至所有任务执行完毕。</li></ul><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><h3 id="数组的sort方法"><a href="#数组的sort方法" class="headerlink" title="数组的sort方法"></a>数组的sort方法</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">22</span>, <span class="number">15</span>, <span class="number">32</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> {<span class="keyword">return</span> a - b}) <span class="comment">// 升序排序 [1, 4, 5, 15, 22, 32]</span></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> {<span class="keyword">return</span> b - a}) <span class="comment">// 降序排序 [32, 22, 15, 5, 4, 1]</span></span><br></pre></td></tr></tbody></table></figure><h2 id="小程序的生命周期"><a href="#小程序的生命周期" class="headerlink" title="小程序的生命周期"></a>小程序的生命周期</h2><p><strong>应用的生命周期</strong></p><ol><li>onLaunch</li><li>onShow</li><li>onHide</li></ol><p><strong>页面的生命周期</strong></p><ol><li>onLoad</li><li>onShow</li><li>onReady</li><li>onHide</li><li>onUnload</li></ol><h2 id="合并数组的方法"><a href="#合并数组的方法" class="headerlink" title="合并数组的方法"></a>合并数组的方法</h2><ol><li>concat</li><li>es6展开运算符 …</li><li>apply (arr1,arr2)</li></ol><h2 id="客户端渲染CSR"><a href="#客户端渲染CSR" class="headerlink" title="客户端渲染CSR"></a>客户端渲染CSR</h2><p>缺点：</p><ol><li>首屏加载慢</li><li>不利于seo</li></ol><h2 id="输出下列结果"><a href="#输出下列结果" class="headerlink" title="输出下列结果"></a>输出下列结果</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">undefined</span> == <span class="literal">null</span>; <span class="comment">//true</span></span><br><span class="line"><span class="literal">undefined</span> === <span class="literal">null</span>; <span class="comment">//false</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">//Object</span></span><br></pre></td></tr></tbody></table></figure><h2 id="前端性能优化"><a href="#前端性能优化" class="headerlink" title="前端性能优化"></a>前端性能优化</h2><ol><li>浏览器缓存</li><li>防抖和节流</li><li>资源懒加载、预加载</li><li>文件按需加载</li><li>图片优化，不要有空的图片地址，多采用svg或字体图标、雪碧图（精灵图）</li><li>将图片的内容以Base64格式内嵌到HTML中,减少http请求的数量</li><li>减少渲染的次数：缓存</li><li>减少渲染次数：对dom查询进行缓存、将dom操作合并、使用减少重排的标签</li><li>CSS放在html的<code>head</code>中，js放在<code>body</code>底部，处理页面布局的文件放在head中，body中尽量不写style和script标签</li></ol><h2 id="首屏性能优化"><a href="#首屏性能优化" class="headerlink" title="首屏性能优化"></a>首屏性能优化</h2><ol><li>首屏不需要展示的大尺寸图片，使用懒加载 </li><li>减小cookie的大小</li><li>使用服务端渲染 ssr</li><li>骨架屏</li><li>精灵图</li><li>减小http请求</li></ol><h2 id="hash和history的区别"><a href="#hash和history的区别" class="headerlink" title="hash和history的区别"></a>hash和history的区别</h2><ol><li>history 利用浏览历史记录的api实现，hash则是监听location对象的hash值变化事件来实现</li><li>history的url没有 #</li><li>改变 hash 不会重新加载页面</li></ol><h2 id="html标签对应的位置"><a href="#html标签对应的位置" class="headerlink" title="html标签对应的位置"></a>html标签对应的位置</h2><h3 id="script标签"><a href="#script标签" class="headerlink" title="script标签"></a>script标签</h3><ul><li><p>放在head标签内，浏览器解析时会将下载全部的script，再解析其他的html内容，会导致渲染阻塞。</p></li><li><p>放在body标签内，浏览器会在在解析完整个html页面后，再下载js，对某些高度依赖js的网站，用户体验差</p></li><li><script>标签的两个属性： async 和 defer ，二者都可以使加载和渲染后续文档元素的过程和 script.js 的加载与执行并行进行* async   不保证js脚本的执行顺序，谁先加载完谁先执行。脚本加载完成后立即执行。* defer  可以保证js脚本的执行顺序。等到文档所有元素解析完成之后才执行。</li></ul><h2 id="跨域的同源策略"><a href="#跨域的同源策略" class="headerlink" title="跨域的同源策略"></a>跨域的同源策略</h2><p>“<code>协议+域名+端口</code>”三者相同。</p><p>跨域拦截是<code>浏览器拦截</code>。</p><p>请求可以发出，服务端能正常接收请求并返回结果，但是浏览器认为不安全，拦截了响应。</p><h2 id="跨域的方式"><a href="#跨域的方式" class="headerlink" title="跨域的方式"></a>跨域的方式</h2><ol><li>jsonp（利用script标签没有跨域限制的机制实现，但是仅支持<code>GET</code>请求）</li><li>CORS（设置<code>Access-Control-Allow-Origin</code>指定可访问资源的域名）</li><li>node中间件代理</li><li>nginx反向代理</li></ol><h2 id="get和post的区别"><a href="#get和post的区别" class="headerlink" title="get和post的区别"></a>get和post的区别</h2><ol><li>get 通过地址栏 url 传参，url参数可见</li><li>post 参数 url 不可见，参数存放在HTTP包体中</li><li>get大小有限制，2048字符。post无限制</li><li>get请求回退无影响，post回退会重新进行提交</li><li>get可以被缓存，post不可以被缓存</li><li>get请求会留在历史记录中，post不会</li></ol><h2 id="重绘和重排"><a href="#重绘和重排" class="headerlink" title="重绘和重排"></a>重绘和重排</h2><p><code>重绘</code>：元素外观改变但没有改变布局时，重新把元素的外观绘制出来的过程。</p><p><code>重排</code>：当dom变化影响了元素的几何信息（位置、大小），浏览器需要计算元素的几何属性，将其重新安放在正确的位置。 </p><h3 id="如何减少重排和重绘"><a href="#如何减少重排和重绘" class="headerlink" title="如何减少重排和重绘"></a>如何减少重排和重绘</h3><ol><li>集中改写样式：将样式统一写在一个类名，再将类名加到对应的元素上。</li><li>设置position的属性为absolute或fixed</li><li>操作 transform：translate</li></ol><h2 id="0-1-0-2-！-0-3"><a href="#0-1-0-2-！-0-3" class="headerlink" title="0.1 + 0.2  ！== 0.3"></a>0.1 + 0.2  ！== 0.3</h2><p>0.1 + 0.2 = 0.30000000000000004</p><p>原因：运算时会先转换为二进制，转换为二级制时会尾数无限循环，js引擎对二进制进行截断，导致精度丢失。</p><p>解决方法：将浮点型转换为整数型,规避掉这类小数计算时的精度问题</p><p>​    <code>0.1+0.2 =&gt; (0.1*10+0.2*10)/10</code></p><h2 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h2><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>一段时间内，js方法只执行一次 </p><p>声明一个变量，记录当前代码是否执行，只有空闲时，才执行函数。</p><blockquote><p>应用场景：页面滚动、抢购、窗口调整</p></blockquote><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><p>频繁触发的情况下，只有足够的 时间间隔 时，才会执行，再次请求则重新计时</p><p>使用定时器，延迟需要执行的函数，多次触发时，把上一次定时器cleartimeout（），并重新计时。</p><blockquote><p>应用场景：短信验证、输入事件</p></blockquote><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><h3 id="cookie的设置"><a href="#cookie的设置" class="headerlink" title="cookie的设置"></a>cookie的设置</h3><p>前端设置cookie：</p><p>优点：前端逻辑清晰，更容易理解，需要什么值就给什么值</p><p>缺点：不安全，容易被篡改</p><p>后端设置cookie</p><p>优点：操作简单，安全性高</p><h3 id="cookie的属性"><a href="#cookie的属性" class="headerlink" title="cookie的属性"></a>cookie的属性</h3><ol><li><p>cookieNAme=cookieValue     名字和值</p></li><li><p>HttpOnly     设置后，只能通过 HTTP 响应报文的 Set-Cookie 来新增或更新 cookie ，<code>客户端无法通过脚本</code>的方式来读写 cookie。</p></li><li><p>Expires     过期时间，使用了GMT 时间格式的字符串</p></li><li><p>Path=/路径     设置后，符合路径的路由跳转时会带上cookie</p></li><li><p>Secure     安全模式，只有处于https协议（安全连接）下，cookie才会被保存下来</p><p>……..</p></li></ol><h2 id="数组去重的方法"><a href="#数组去重的方法" class="headerlink" title="数组去重的方法"></a>数组去重的方法</h2><ol><li>遍历数组，使用indexOf查找</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">12</span>,<span class="number">21</span>,<span class="number">123</span>,<span class="number">435</span>,<span class="number">65</span>,<span class="number">32</span>,<span class="number">12</span>,<span class="number">12</span>,<span class="number">123</span>]</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">newarr</span> =(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">var</span> n=[] <span class="comment">//临时数组</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">let</span> i=<span class="number">0</span>,i&lt;=arr.<span class="property">length</span>,i++)&#123;</span><br><span class="line">        <span class="comment">//遍历数组</span></span><br><span class="line">        <span class="keyword">if</span>(n.<span class="title function_">indexOf</span>(arr[i])==-<span class="number">1</span>)</span><br><span class="line">            n.<span class="title function_">push</span>(arr[i])</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> n </span><br><span class="line">&#125;</span><br><span class="line">arr=<span class="title function_">newarr</span>(arr)</span><br></pre></td></tr></table></figure><ol start="2"><li><p>数组下标判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">newarr</span> =(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">var</span> n=[ arr[<span class="number">0</span>] ] <span class="comment">//临时数组,存入第0项</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">let</span> i=<span class="number">1</span>,i&lt;=arr.<span class="property">length</span>,i++)&#123;</span><br><span class="line">        <span class="comment">//遍历数组，从第一项开始</span></span><br><span class="line">        <span class="keyword">if</span>(arr.<span class="title function_">indexOf</span>(arr[i])==i)</span><br><span class="line">            <span class="comment">//条件不成立则说明前面有重复的数据</span></span><br><span class="line">            n.<span class="title function_">push</span>(arr[i])</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> n </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>es6 的 set 类型去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr=[...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)]</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">newarr</span> =(<span class="params">arr</span>)=&gt;&#123;</span><br><span class="line">   <span class="comment">// 重新转换为数组, Array.from()可以把set结构转化为数组</span></span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="XSS攻击和CSRF攻击"><a href="#XSS攻击和CSRF攻击" class="headerlink" title="XSS攻击和CSRF攻击"></a>XSS攻击和CSRF攻击</h2><p><code>XSS</code> ：Cross-Site Scripting(跨站脚本攻击)， 是一种<strong>代码注入攻击</strong></p><p>XSS的危害：</p><ul><li>窃取Cookie</li><li>监听用户行为，比如用户登录后发送账号和密码到黑客服务器。</li><li>修改 DOM 伪造登录表单</li><li>在页面中添加弹窗或广告，骗取用户点击。</li></ul><p>防范：</p><ul><li><p>httpOnly：在cookie中设置HttpOnly属性后，js脚本将无法读取到cookie信息</p></li><li><p>输入过滤：一般是用于对于输入格式的检查，例如：邮箱，电话号码，用户名，密码……等，按照规定的格式输入。不仅仅是前端负责，后端也要做相同的过滤检查。因为攻击者完全可以绕过正常的输入流程，直接利用相关接口向服务器发送设置。</p></li></ul><p><code>CSRF</code> ：(Cross-site request forgery), 即跨站请求伪造，指诱导用户点击链接，打开黑客的网站，然后黑客利用用户目前的登录状态发起跨站请求。</p><p>CSRF的危害：</p><ul><li>进入页面后自动提交表单，获取用户cookies</li><li>诱导用户进入页面后点击链接，完成进攻</li></ul><p>防范：</p><ul><li>验证来源站点，HTTP Referer 字段（Referer 值会记录下用户的访问来源）</li><li>在请求地址中添加token并验证</li></ul><h2 id="webpack：模块打包工具"><a href="#webpack：模块打包工具" class="headerlink" title="webpack：模块打包工具"></a>webpack：模块打包工具</h2><p>可以把互相依赖的html、css、js、图片、字体等资源文件，打包成静态的前端项目。</p><p>把模块化的代码，转化为浏览器可识别的代码</p><p>在webpack.config.js中配置webpack</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;develepoment&quot;</span>, <span class="comment">//环境  &quot;develepoment&quot;/&quot;production&quot;,</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&#x27;./src/index.js&#x27;</span>, <span class="comment">//入口文件</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">//打包生产的文件名 、目录</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;dist.js&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="comment">//loader</span></span><br><span class="line">        rules;[</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="attr">test</span>:<span class="regexp">/\.css$/i</span>,<span class="comment">//正则表达式匹配文件名</span></span><br><span class="line">        use：[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">   &#123;<span class="comment">//配置图片，内置loader</span></span><br><span class="line">    <span class="attr">test</span>:<span class="regexp">/\.(png|svg|jpg|jpeg|gif)$/i</span>,</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&#x27;asset/resource&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">        ]</span><br><span class="line">   &#125;,</span><br><span class="line">       <span class="comment">//插件，需要npm安装后，使用const PluginsName = require(&#x27;PluginsName&#x27;)导入</span></span><br><span class="line">   <span class="attr">plugins</span>:[ <span class="keyword">new</span> <span class="title class_">PluginsName</span>()]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安装style-loader、css-loader后可以解析 import ‘./style.css’ 的代码</p><h3 id="常见的loader有哪些？"><a href="#常见的loader有哪些？" class="headerlink" title="常见的loader有哪些？"></a>常见的loader有哪些？</h3><p>Loader 是webpack中提供了一种处理多种文件格式的机制</p><ul><li>css-loader:将css文件变成commonjs模块加载到js中，模块内容是样式字符串</li><li>style-loader: 创建style标签，将js中的样式资源插入标签内，并将标签添加到head中生效</li><li>ts-loader: 打包编译Typescript文件</li><li>less-loader:将less文件编译成css文件</li></ul><h3 id="常见的Plugin有哪些"><a href="#常见的Plugin有哪些" class="headerlink" title="常见的Plugin有哪些"></a>常见的Plugin有哪些</h3><p>解决loader 无法实现的事情，比如打包优化和代码压缩等</p><ul><li>html-webpack-plugin 处理html资源，默认会创建一个空的HTML，自动引入打包输出的所有资源（js/css）</li><li>mini-css-extract-plugin 打包过后的css在js文件里，该插件可以把css单独抽出来</li><li>clean-webpack-plugin 每次打包时候，CleanWebpackPlugin 插件就会自动把上一次打的包删除</li></ul><h2 id="输入一个URL到页面过程中发生了什么"><a href="#输入一个URL到页面过程中发生了什么" class="headerlink" title="输入一个URL到页面过程中发生了什么"></a>输入一个URL到页面过程中发生了什么</h2><ol><li>DNS解析：将域名解析成IP地址</li><li>TCP连接：TCP三次握手</li><li>发送HTTP请求</li><li>服务器处理请求并返回HTTP报文</li><li>浏览器解析渲染页面</li><li>连接结束：TCP四次挥手</li></ol><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>Hyper Text Transfer Protocol（超文本传输协议）</p><p>基于tcp/ip通信协议来传递数据（html文件、图片、查询结果等）</p><p><strong><code>HTTPS 则是引入安全性的 SSL 加密传输协议</code></strong></p><h3 id="http的特点"><a href="#http的特点" class="headerlink" title="http的特点"></a>http的特点</h3><p>（1）无连接：限制每次连接只处理一个请求，服务端完成客户端的请求后，即断开连接。（传输速度快，减少不必要的连接，但也意味着每一次访问都要建立一次连接，效率降低）；</p><p>（2）无状态：对于事务处理没有记忆能力。每一次请求都是独立的，不记录客户端任何行为；</p><p>（3）客户端/服务端模型：客户端支持web浏览器或其他任何客户端；</p><p>（4）简单快速；</p><p>（5）灵活：可以传输任何类型的数据。””</p><h3 id="http和https的区别"><a href="#http和https的区别" class="headerlink" title="http和https的区别"></a>http和https的区别</h3><ul><li>http的信息是明文传输，https则映入了ssl加密传输协议</li><li>http默认端口80，https的默认端口443</li><li>https需要有ca证书</li></ul><h3 id="http的响应码及含义？"><a href="#http的响应码及含义？" class="headerlink" title="http的响应码及含义？"></a>http的响应码及含义？</h3><p>100 ：请求者应当继续提出请求。</p><p>101 ：(切换协议) 请求者已要求服务器切换协议，服务器已确认并准备进行切换。</p><p>2xx(成功)</p><p><code>200</code>：正确的请求返回正确的结果</p><p>201：表示资源被正确的创建。比如说，我们 POST 用户名、密码正确创建了一个用户就可以返回 201。</p><p>202：请求是正确的，但是结果正在处理中，这时候客户端可以通过轮询等机制继续请求。</p><p>3xx(已重定向)</p><p>300：请求成功，但结果有多种选择。</p><p>301：请求成功，但是资源被永久转移。</p><p>303：使用 GET 来访问新的地址来获取资源。</p><p>304：请求的资源并没有被修改过</p><p>4xx(请求错误)</p><p>400：请求出现错误，比如请求头不对等。</p><p>401：没有提供认证信息。请求的时候没有带上 Token 等。</p><p>402：为以后需要所保留的状态码。</p><p><code>403</code>：请求的资源不允许访问。就是说没有权限。</p><p><code>404</code>：请求的内容不存在。</p><p><code>500</code>：服务器错误。</p><h3 id="http的强缓存、协商缓存"><a href="#http的强缓存、协商缓存" class="headerlink" title="http的强缓存、协商缓存"></a>http的强缓存、协商缓存</h3><p>浏览器缓存是浏览器在本地磁盘对用户最近请求过的文档进行存储，当访问者再次访问同一页面时，浏览器就可以直接从本地磁盘加载文档。</p><ul><li>强缓存：当请求资源的时，如果是之前请求过的并使用强缓存，那么在过期时间内将<strong>不会发送本次请求向服务器获取资源，而是直接从浏览器缓存中获取（不管资源是否改动）</strong>。过期了将重新从服务器获取，并再次强缓存。</li><li>协商缓存：当请求资源时，如果是之前请求过的并使用协商缓存，还是发送请求到服务器，服务器通过逻辑判断确认资源没有修改返回304状态码，那么本次的资源则是从缓存中获取；如果经过判断确认资源被修改过，则重新发送资源到客户端，并且客户端更新缓存。</li></ul><h2 id="typescript-的-type-和-interface-的区别"><a href="#typescript-的-type-和-interface-的区别" class="headerlink" title="typescript 的 type 和 interface 的区别"></a>typescript 的 type 和 interface 的区别</h2><ul><li>都支持扩展</li><li>type可以设置别名，interface不行</li><li>interface设置重名会合并属性、type会报错</li></ul><h2 id="sass"><a href="#sass" class="headerlink" title="sass"></a>sass</h2><h3 id="sass和css的区别："><a href="#sass和css的区别：" class="headerlink" title="sass和css的区别："></a>sass和css的区别：</h3><ul><li>sass浏览器不能直接识别解析，需要经过编译器编译，而css3可以识别。</li><li>sass是css预处理语言，编译后生成css</li><li>sass支持变量、嵌套、继承等高级功能，css不能</li><li>sass更加优雅，维护更加方便</li></ul><h3 id="sass的混入和继承"><a href="#sass的混入和继承" class="headerlink" title="sass的混入和继承"></a>sass的混入和继承</h3><p>混入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//定义</span><br><span class="line"><span class="keyword">@mixin</span> bd($<span class="attribute">color</span>: red) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: $color</span><br><span class="line">&#125;</span><br><span class="line">//使用</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> bd(yellow)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.extend</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="keyword">@extend</span> .extend;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二者都是为了实现代码的复用</p><p><code>区别在于</code>：混入是直接复制一份代码，继承则是对类添加选择器达到共用代码的目的。</p><h2 id="diff算法"><a href="#diff算法" class="headerlink" title="diff算法"></a>diff算法</h2><p>在进行同层的虚拟节点对比，并返回一个patch对象，用来存储两个节点不同的地方，最后用patch记录的消息去局部更新Dom。</p><h2 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h2><p><code>浅拷贝</code>：拷贝的是对象的引用值，当改变对象的值，另一个对象的值也会发生变化</p><p><code>深拷贝</code>：属性的各个层级都要拷贝，在堆中开辟了自己的内存区域，不受外界干扰。</p><h3 id="深拷贝方法"><a href="#深拷贝方法" class="headerlink" title="深拷贝方法"></a>深拷贝方法</h3><ol><li><code>JSON.parse(JSON.stringfy( ))</code>: 不能拷贝函数。遇到正则会变成对象。</li></ol><h3 id="浅拷贝方"><a href="#浅拷贝方" class="headerlink" title="浅拷贝方"></a>浅拷贝方</h3><ol><li>展开运算符</li><li>Object.assign( )</li><li>newarr= arr.slice( )</li><li>newarr= arr.concat( )</li></ol><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">A</span> ()&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title function_">A</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( a.<span class="property">__proto__</span> === A.<span class="property"><span class="keyword">prototype</span></span> )   <span class="comment">// true，这里是根据上面 &#x27;需要了解&#x27;处可以推断</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( A.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span> )  <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>ps:<code>_proto_是每个对象都有的属性，prototype是函数才有的属性</code></p><p>每个对象都有<code>_proto_</code>属性 ,这个属性指向另外一个对象的<code>prototype</code></p><h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><p>每个函数也是一个对象，它们对应的类就是function，每个函数对象都具有一个子对象prototype。</p><p>Prototype 表示了该函数的原型，prototype表示了一个类的属性的集合。</p><p>当通过new来生成一个类的对象时，prototype对象的属性就会成为实例化对象的属性</p><h3 id="使用prototype属性定义的对象方法和不使用prototype属性定义的对象方法有什么区别？"><a href="#使用prototype属性定义的对象方法和不使用prototype属性定义的对象方法有什么区别？" class="headerlink" title="使用prototype属性定义的对象方法和不使用prototype属性定义的对象方法有什么区别？"></a>使用prototype属性定义的对象方法和不使用prototype属性定义的对象方法有什么区别？</h3><ul><li>使用 prototype定义的方法相当于类的实例方法，必须new后才能使用</li><li>不使用prototype定义的方法相当于类的静态方法，可以直接使用，不需要new</li></ul><h2 id="vue-router-路由"><a href="#vue-router-路由" class="headerlink" title="vue-router 路由"></a>vue-router 路由</h2><h3 id="params-和-query-的区别"><a href="#params-和-query-的区别" class="headerlink" title="params 和 query 的区别"></a><strong>params 和 query</strong> 的区别</h3><ol><li>query可以用name和path来传递，params只能用name来传递</li><li>query在url中可见，params不可见</li><li>query在刷新页面的时候参数不会消失，但params在刷新页面的时候参数会消失</li><li>接受方式不同，router.query  router.params</li></ol><h3 id="routerm-和-route"><a href="#routerm-和-route" class="headerlink" title="routerm 和 route"></a>routerm 和 route</h3><p>router是VueRouter的实例方法，相当于一个全局的路由器对象，作用是进行路由跳转。</p><p>route是一个跳转的路由对象，局部对象，可以获取对应的name、path、query、params等</p><h2 id="object-key"><a href="#object-key" class="headerlink" title="object.key()"></a>object.key()</h2><p>将对象的所有属性(key)以数组的形式返回</p><h3 id="vue2和vue3的双向数据绑定的实现区别"><a href="#vue2和vue3的双向数据绑定的实现区别" class="headerlink" title="vue2和vue3的双向数据绑定的实现区别"></a>vue2和vue3的双向数据绑定的实现区别</h3><p>vue2通过Object.defineProperty()对数据进行劫持 结合 发布订阅模式来实现 </p><p>vue3使用es6中的proxy对数据代理，通过reactive（）给每一个都对象都包一层proxy，通过proxy监听属性的变化，从而对数据进行监控</p><h3 id="前端登录流程"><a href="#前端登录流程" class="headerlink" title="前端登录流程"></a>前端登录流程</h3><ol><li><p>点击登录时，前端会带着用户的用户名和密码去请求后端接口</p></li><li><p>后端收到请求后，会验证用户名和密码是否正确</p></li><li><p>验证失败则返回错误信息，前端提示相关信息</p></li><li><p>如果成功则返回一个token值</p></li><li><p>前端存储token值（vuex，localstorage）</p></li><li><p>每一次跳转到需要登录权限的页面时，都需要验证token是否存在，不存在则跳转登陆页面（通常在路由守卫处理）</p></li></ol></script></li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git使用</title>
      <link href="/post/4896de77.html"/>
      <url>/post/4896de77.html</url>
      
        <content type="html"><![CDATA[<h1 id="git使用"><a href="#git使用" class="headerlink" title="git使用"></a>git使用</h1><p>在gitee上新建一个仓库</p><p>使用命令克隆至本地</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone url</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m '备注'</span><br><span class="line">git push</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查看所有</span><br><span class="line">git status</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 操作指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js</title>
      <link href="/post/ea92bad2.html"/>
      <url>/post/ea92bad2.html</url>
      
        <content type="html"><![CDATA[<h1 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h1><p>node.js可以解析js代码，没有浏览器的安全级别限制。不可以使用dom、bom。</p><h2 id="npm的使用"><a href="#npm的使用" class="headerlink" title="npm的使用"></a>npm的使用</h2><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">npm init </span><br><span class="line">npm install 包名 -g</span><br><span class="line">npm install 包名 --save-dev</span><br><span class="line">npm uninstall 包名</span><br><span class="line">npm update 包名 </span><br><span class="line">npm info 包名   <span class="comment">//查看包信息</span></span><br><span class="line"></span><br><span class="line">#pakage文件中</span><br><span class="line"><span class="string">"dependencies"</span>：<span class="punctuation">{</span> <span class="attr">"md"</span><span class="punctuation">:</span><span class="string">"^2.1.1"</span><span class="punctuation">}</span><span class="punctuation">}</span>  <span class="comment">// ^代表第一个大版本不变，安装2.*.*版本</span></span><br><span class="line"><span class="string">"dependencies"</span>：<span class="punctuation">{</span> <span class="attr">"md"</span><span class="punctuation">:</span><span class="string">"~2.1.1"</span><span class="punctuation">}</span><span class="punctuation">}</span>  <span class="comment">// ~代表前两个版本不变，安装2.1.*版本</span></span><br><span class="line"><span class="string">"dependencies"</span>：<span class="punctuation">{</span> <span class="attr">"md"</span><span class="punctuation">:</span><span class="string">"*"</span><span class="punctuation">}</span><span class="punctuation">}</span>  <span class="comment">// *代表直接安装最新版本版本</span></span><br></pre></td></tr></tbody></table></figure><h2 id="开启ES模块化写法"><a href="#开启ES模块化写法" class="headerlink" title="开启ES模块化写法"></a>开启ES模块化写法</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#pakage.<span class="property">json</span>文件中</span><br><span class="line">{</span><br><span class="line"><span class="string">"type"</span>：<span class="string">"module"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">#引用使用es6方式</span><br><span class="line"><span class="keyword">import</span> <span class="variable language_">module</span> <span class="keyword">from</span> <span class="string">'.js'</span></span><br><span class="line"><span class="keyword">export</span> <span class="variable language_">module</span> = { }</span><br></pre></td></tr></tbody></table></figure><h2 id="内置模块"><a href="#内置模块" class="headerlink" title="内置模块"></a>内置模块</h2><blockquote><p>npm i -g nodemon  自动重启服务器</p></blockquote><h3 id="01-http模块"><a href="#01-http模块" class="headerlink" title="01 http模块"></a>01 http模块</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//##引入http模块</span></span><br><span class="line"><span class="keyword">let</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务器</span></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> {</span><br><span class="line">    <span class="comment">// req接受浏览器的参数，res返回渲染的内容</span></span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, { <span class="string">'Content-Type'</span>: <span class="string">'text/html;charset=utf-8'</span> })</span><br><span class="line">    res.<span class="title function_">write</span>(<span class="title function_">renderHTML</span>(req.<span class="property">url</span>))</span><br><span class="line">    res.<span class="title function_">end</span>()</span><br><span class="line">}).<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'server start'</span>);</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">//##也可以</span></span><br><span class="line"><span class="keyword">let</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">"request"</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>{</span><br><span class="line">    <span class="comment">//逻辑</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>{</span><br><span class="line">    </span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>JSONP：动态创建script标签，src的指向没有跨域限制</p><p>cros请求头实现跨域</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">writeHead</span>(<span class="number">200</span>,{</span><br><span class="line"><span class="string">"access-control-allow-origin"</span>:<span class="string">"*"</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>可以作为中间件（中间层），从接口get、pots数据，在传给前端，绕开跨域问题</p><h3 id="02-url模块"><a href="#02-url模块" class="headerlink" title="02 url模块"></a>02 url模块</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//##引入url模块</span></span><br><span class="line"><span class="keyword">let</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"></span><br><span class="line">url.<span class="title function_">parse</span>( req.<span class="property">url</span>,<span class="literal">true</span>)</span><br><span class="line"><span class="comment">//会解析出  第二个参数true可以使query 解析成为一个对象</span></span><br><span class="line">pathname</span><br><span class="line">query</span><br></pre></td></tr></tbody></table></figure><h3 id="03-querystring模块"><a href="#03-querystring模块" class="headerlink" title="03 querystring模块"></a>03 querystring模块</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解析query</span></span><br><span class="line"><span class="keyword">let</span> querystring = <span class="built_in">require</span>(<span class="string">"querystring"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'name=zmxj&amp;age=21&amp;location=nanchang'</span></span><br><span class="line"><span class="keyword">let</span> obj = querystring.<span class="title function_">parse</span>(str) <span class="comment">// { name:'zmxj',age:'21',location:'nanchang'}</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mystr = { <span class="attr">name</span>:<span class="string">'zmxj'</span>,<span class="attr">age</span>:<span class="string">'21'</span>,<span class="attr">location</span>:<span class="string">'nanchang'</span>}</span><br><span class="line"><span class="keyword">let</span> myobj = querystring.<span class="title function_">stringify</span>( mystr ) <span class="comment">//name=zmxj&amp;age=21&amp;location=nanchang</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据编码</span></span><br><span class="line">querystring.<span class="built_in">escape</span>()    </span><br><span class="line">querystring.<span class="built_in">unescape</span>()    </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="04-events模块"><a href="#04-events模块" class="headerlink" title="04 events模块"></a>04 events模块</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Event</span> = <span class="built_in">require</span>(<span class="string">'events'</span>)</span><br><span class="line"><span class="keyword">const</span> event = <span class="keyword">new</span> <span class="title class_">Event</span>()</span><br><span class="line"></span><br><span class="line">event.<span class="title function_">on</span>(<span class="string">'play'</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'我被触发了'</span>);</span><br><span class="line">})</span><br><span class="line">event.<span class="title function_">emit</span>(<span class="string">'play'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="05-fs文件操作"><a href="#05-fs文件操作" class="headerlink" title="05 fs文件操作"></a>05 fs文件操作</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="comment">//##目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建</span></span><br><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">'./路径/目录名字'</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>{</span><br><span class="line"><span class="keyword">if</span>(err &amp;&amp; err.<span class="property">code</span> === <span class="variable constant_">EEXIST</span>){</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'目录已经存在'</span>)</span><br><span class="line">}</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">//重命名</span></span><br><span class="line">fs.<span class="title function_">rename</span>(<span class="string">'./路径/目录名字'</span>,<span class="string">'./路径/新目录'</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>{</span><br><span class="line">    <span class="keyword">if</span>(err &amp;&amp; err.<span class="property">code</span> === <span class="variable constant_">ENOENT</span> ){</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'目录不存在'</span>)</span><br><span class="line">}</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">fs.<span class="title function_">rmdir</span>(<span class="string">'./路径/目录名字'</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>{</span><br><span class="line">    <span class="keyword">if</span>(err &amp;&amp; err.<span class="property">code</span> === <span class="variable constant_">ENOENT</span> ){</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'目录不存在'</span>)</span><br><span class="line">}</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">//##文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建文件</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">'./路径/目录名字/文件名字.文件格式'</span>,<span class="string">'内容'</span>,<span class="function"><span class="params">err</span>=&gt;</span>{</span><br><span class="line">    <span class="comment">//文件不存在则创建文件，文件存在则新文件会覆盖旧文件</span></span><br><span class="line">})</span><br><span class="line"><span class="comment">//追加内容</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">'./路径/目录名字/文件名字.文件格式'</span>,<span class="string">'\n新内容'</span>,<span class="function"><span class="params">err</span>=&gt;</span>{})</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取内容</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">'./路径/目录名字/文件名字.文件格式'</span>,<span class="string">'utf-8'</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>{</span><br><span class="line">    <span class="keyword">if</span>(!err){</span><br><span class="line">        <span class="comment">//console.log(data.toString('utf-8'))</span></span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">fs.<span class="title function_">unlink</span>(<span class="string">'./路径/目录名字/文件名字.文件格式'</span>,<span class="function"><span class="params">err</span>=&gt;</span>{})</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取目录下文件</span></span><br><span class="line">fs.<span class="title function_">readdir</span>(<span class="string">'./路径/目录名字'</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>{ </span><br><span class="line"><span class="keyword">if</span>(!err){  <span class="variable language_">console</span>.<span class="title function_">log</span>(data) }</span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><blockquote><p>存储在用户浏览器的一段不超过4kb的字符创。由name和value以及用于控制cookie有效期、安全期、适用范围的可选属性组成。</p></blockquote><p><code>特性</code></p><ol><li>自动发送</li><li>域名独立</li><li>过期时限</li><li>4kb限制</li></ol><p>客户端第一次请求服务器时，服务器通过响应头的形式，向客户顿发送一个生份认证的cookie，客户端会自动将cookie保存在浏览器中。</p><p> 随后，客户端每次请求服务器时，浏览器都会自动将cookie通过请求头的形式发送给服务器，服务器即可验证客户端身份。 </p><p><code>cookie不具有安全性</code>，浏览器提供了读写cookie的api，因此cookie很容易被伪装，避免存储cookie存储重要隐私数据。</p><h1 id="express"><a href="#express" class="headerlink" title="express"></a>express</h1><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p><code>不用修改原有代码，添加和扩展一些功能</code></p><p>中间件函数中可以  </p><ol><li>执行任何代码</li><li>修改request或response响应对象</li><li>结束请求响应周期</li><li>调用下一个中间件</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//req 请求对象</span></span><br><span class="line"><span class="comment">//res 响应对象</span></span><br><span class="line"><span class="comment">//next 下一个中间件</span></span><br><span class="line"><span class="comment">//中间件的顺序很重要</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>{</span><br><span class="line"><span class="comment">//交出执行权，放行，往后继续匹配执行</span></span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h4 id="使用-express-托管静态文件"><a href="#使用-express-托管静态文件" class="headerlink" title="使用 express 托管静态文件"></a>使用 express 托管静态文件</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">'public'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以访问 public 目录中的所有文件</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:3000/images/kitten.jpg</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:3000/css/style.css</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:3000/js/app.js</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:3000/images/bg.png</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:3000/hello.html</span></span><br></pre></td></tr></tbody></table></figure><h3 id="应用级别中间件"><a href="#应用级别中间件" class="headerlink" title="应用级别中间件"></a>应用级别中间件</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app  = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">//不限制请求路径</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>{</span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">//限制请求路径</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">'/home/:id'</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>{</span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">//限制请求方法+请求路径</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">'/home/:id'</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>{</span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">//多个</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">'/home/:id'</span>,</span><br><span class="line">        <span class="keyword">function</span>(<span class="params">req,res,next</span>){</span><br><span class="line">    <span class="comment">//函数体1</span></span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">},<span class="keyword">function</span>(<span class="params">req,res,next</span>){</span><br><span class="line">    <span class="comment">//函数体2</span></span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">//跳过其余的中间件</span></span><br><span class="line"><span class="title function_">next</span>(<span class="string">'route'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//中间件还可以使用数组定义</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loa1</span>(<span class="params">req,res,next</span>){ ....  <span class="title function_">next</span>()   }</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loa2</span>(<span class="params">req,res,next</span>){ ....  <span class="title function_">next</span>()   }                   </span><br><span class="line"><span class="keyword">let</span> arr = [ loa1,loa2 ]</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">'home/:id'</span>,arr,<span class="keyword">function</span>(<span class="params">req,res,next</span>){ ...})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="路由器级别中间件"><a href="#路由器级别中间件" class="headerlink" title="路由器级别中间件"></a>路由器级别中间件</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//====== 在router.js中======</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="comment">//1.创建路由实例  --想低昂与一个mini express实例</span></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.路由配置</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">'/dfg'</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>{})</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.导出路由</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br><span class="line"></span><br><span class="line"><span class="comment">//====== 在app.js中======</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.将路由集成到express实例中   -注意执行顺序</span></span><br><span class="line">app.<span class="title function_">use</span>(router) </span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以设置路径 </span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">'/abc'</span>,router) <span class="comment">// 实际请求地址为 /abc/dfg</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="错误处理中间件"><a href="#错误处理中间件" class="headerlink" title="错误处理中间件"></a>错误处理中间件</h3><p>将任何内容 传给 <code>next()</code>  <code>(除了字符串router) </code> express都会将当前请求视为错误，跳过其余 中间件，进入错误处理中间件  </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一般在所有中间件挂在完后执行错误处理中间件</span></span><br><span class="line"><span class="comment">//使用next(err) 进入错误处理中间件</span></span><br><span class="line"><span class="comment">//接收4个参数</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err,req,res,next</span>)=&gt;</span>{</span><br><span class="line">    </span><br><span class="line">})</span><br><span class="line"> </span><br><span class="line"><span class="comment">//处理404</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>{</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">'404 not found.'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="内置中间件"><a href="#内置中间件" class="headerlink" title="内置中间件"></a>内置中间件</h3><ul><li>json( )</li><li>urlencoded( )</li><li>raw( )</li><li>text( )</li><li>static( )</li></ul><h3 id="第三方中间件"><a href="#第三方中间件" class="headerlink" title="第三方中间件"></a>第三方中间件</h3><h1 id="搭配mysql"><a href="#搭配mysql" class="headerlink" title="搭配mysql"></a>搭配mysql</h1><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mysql -D</span><br></pre></td></tr></tbody></table></figure><h2 id="在mysql中创建数据库、建表、添加数据"><a href="#在mysql中创建数据库、建表、添加数据" class="headerlink" title="在mysql中创建数据库、建表、添加数据"></a>在mysql中创建数据库、建表、添加数据</h2><ul><li><p>在mysql中没有数组类型</p></li><li><p>数组的值应使用<a href="https://www.sojson.com/">JSON格式转换网站</a>改写成JSON格式，并压缩成一行（否则会出现转移换行字符，不利于数据的使用）</p></li><li><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20221124212209663.png" alt="image-20221124212209663"></p></li></ul><h2 id="在node中引入并连接mysql"><a href="#在node中引入并连接mysql" class="headerlink" title="在node中引入并连接mysql"></a>在node中引入并连接mysql</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>)</span><br><span class="line"><span class="comment">// 测试mysql</span></span><br><span class="line"><span class="keyword">let</span> sqlConnection = mysql.<span class="title function_">createConnection</span>({</span><br><span class="line">    <span class="attr">host</span>: <span class="string">'localhost'</span>,<span class="comment">//主机名</span></span><br><span class="line">    <span class="attr">user</span>: <span class="string">'root'</span>,<span class="comment">//用户名</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">'123456'</span>,<span class="comment">//密码</span></span><br><span class="line">    <span class="attr">database</span>: <span class="string">'huawei_vmall'</span><span class="comment">//所连接的数据库</span></span><br><span class="line">})</span><br><span class="line">sqlConnection.<span class="title function_">connect</span>()<span class="comment">//连接</span></span><br></pre></td></tr></tbody></table></figure><h2 id="使用mysql"><a href="#使用mysql" class="headerlink" title="使用mysql"></a>使用mysql</h2><ul><li><p>和调用接口一样使用</p></li><li><p>使用query函数对数据库进行操作，接收参数为sql语句，回调函数第一个参数为错误，第二个参数为结果</p></li><li><p>将mysql的数据使用<code>JSON.stringify( )</code>转换为字符串格式。</p></li><li><p>在使用时使用<code>JSON.parse( )</code>转回来</p></li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">'/mysql-goodslist'</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) {</span><br><span class="line">    <span class="keyword">let</span> sql = <span class="string">"SELECT * FROM goodslist"</span></span><br><span class="line">    sqlConnection.<span class="title function_">query</span>(sql, <span class="keyword">function</span> (<span class="params">err, result</span>) {</span><br><span class="line">        <span class="keyword">if</span> (err) {</span><br><span class="line">            <span class="comment">// console.log(err, '错误')</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// console.log(result, '测试结果')</span></span><br><span class="line">        res.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(result))</span><br><span class="line">    })</span><br><span class="line">    sqlConnection.<span class="title function_">end</span>()</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h1 id="node-登录-token"><a href="#node-登录-token" class="headerlink" title="node 登录  token"></a>node 登录  token</h1><p>安装 jsonwebtoken 用于生成和解密token</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i jsonwebtoken</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jwt = <span class="built_in">require</span>(<span class="string">'jsonwebtoken'</span>)</span><br><span class="line"><span class="comment">// 验证成功后，生成token 返回前端 </span></span><br><span class="line"><span class="comment">// 第一个参数是 组，第二个参数 是私钥(随便定义)</span></span><br><span class="line"> <span class="keyword">const</span> token = jwt.<span class="title function_">sign</span>(result[<span class="number">0</span>].<span class="property">user_name</span>, <span class="string">'yuyu'</span>)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 操作指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp</title>
      <link href="/post/bc2ee5a9.html"/>
      <url>/post/bc2ee5a9.html</url>
      
        <content type="html"><![CDATA[<h1 id="uniapp"><a href="#uniapp" class="headerlink" title="uniapp"></a>uniapp</h1><p>目录结构</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220925155355265.png" alt="image-20220925155355265"></p><h3 id="把项目运行到微信开发者工具"><a href="#把项目运行到微信开发者工具" class="headerlink" title="把项目运行到微信开发者工具"></a>把项目运行到微信开发者工具</h3><ol><li>manifest.json中填入appid即可</li></ol><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220925155929283.png" alt="image-20220925155929283"></p><ol start="2"><li><p>配置微信开发者工具路径</p><p><code>工具-设置-运行配置-填写微信开发者工具路径</code></p></li></ol><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220925160310506.png" alt="image-20220925160310506"></p><ol start="3"><li>在微信开发者工具 <code>设置-安全设置-打开服务端口</code></li></ol><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220925160638485.png" alt="image-20220925160638485"></p><ol start="4"><li><p>在HBuilderX中 <code>运行-运行到小程序模拟器-微信开发者工具</code></p></li><li><p>在HBuilderX中保存后，即可在小程序开发者工具查看效果</p></li></ol><h3 id="git忽略文件"><a href="#git忽略文件" class="headerlink" title="git忽略文件"></a>git忽略文件</h3><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220925161813094.png" alt="image-20220925161813094"></p><p>因为忽略了unpackage中仅有的文件dist，默认unpackage目录不会被git追踪，所以创建一个<code>.gitkeep</code> 的文件进行占位</p><h5 id="选择地址"><a href="#选择地址" class="headerlink" title="选择地址"></a>选择地址</h5><p>uni.chooseAddress</p><p>需要在<code>mainfest.json</code>中，选择源码视图，在”mp-weixin”  节点内添加</p><p>“requiredPrivateInfos”: [“getLocation”, “chooseLocation”, “chooseAddress”]</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">"mp-weixin"</span> <span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="comment">/* 小程序特有相关 */</span></span><br><span class="line">        <span class="attr">"appid"</span> <span class="punctuation">:</span> <span class="string">"wx5c09b50319662051"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"setting"</span> <span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"urlCheck"</span> <span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"usingComponents"</span> <span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"requiredPrivateInfos"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">"getLocation"</span><span class="punctuation">,</span> <span class="string">"chooseLocation"</span><span class="punctuation">,</span> <span class="string">"chooseAddress"</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br></pre></td></tr></tbody></table></figure><p>即可正常使用</p><h5 id="登陆授权"><a href="#登陆授权" class="headerlink" title="登陆授权"></a>登陆授权</h5><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> &lt;button type=<span class="string">"primary"</span> <span class="keyword">class</span>=<span class="string">"btn-login"</span> @click=<span class="string">"getUserProfile"</span>&gt;一键登录&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getUserProfile</span>(<span class="params"></span>) {</span><br><span class="line">        uni.<span class="title function_">getUserProfile</span>({</span><br><span class="line">          <span class="attr">desc</span>: <span class="string">'你的授权信息'</span>,</span><br><span class="line">          <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res,<span class="string">'登陆成功'</span>)</span><br><span class="line">          },</span><br><span class="line">          <span class="attr">fail</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">            <span class="keyword">return</span> uni.$showMsg(<span class="string">'您取消了登录授权'</span>)</span><br><span class="line">          }</span><br><span class="line">        })</span><br></pre></td></tr></tbody></table></figure><h4 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h4><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上传图片</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">uploadImage</span> = (<span class="params">url: <span class="built_in">string</span>, su_title: <span class="built_in">string</span>, err_title: <span class="built_in">string</span></span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">        uni.<span class="title function_">chooseMedia</span>({</span><br><span class="line">            <span class="attr">count</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">mediaType</span>: [<span class="string">'image'</span>],</span><br><span class="line">            <span class="attr">sizeType</span>: [<span class="string">'compressed'</span>],</span><br><span class="line">            <span class="attr">success</span>: <span class="function">(<span class="params">res: <span class="built_in">any</span></span>) =&gt;</span> {</span><br><span class="line">                <span class="comment">// console.log(res, '图片暂时本地路径');</span></span><br><span class="line">                <span class="comment">// 拿到暂时路径后，将图片上传</span></span><br><span class="line">                uni.<span class="title function_">showLoading</span>({ <span class="attr">title</span>: su_title, <span class="attr">mask</span>: <span class="literal">true</span> })</span><br><span class="line">                uni.<span class="title function_">uploadFile</span>({</span><br><span class="line">                    url,</span><br><span class="line">                    <span class="attr">filePath</span>: res.<span class="property">tempFiles</span>[<span class="number">0</span>].<span class="property">tempFilePath</span>,</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">'file'</span>,</span><br><span class="line">                    <span class="attr">header</span>: { <span class="attr">accept</span>: <span class="string">'application/json'</span> },</span><br><span class="line">                    <span class="attr">success</span>: <span class="function">(<span class="params">res_img: <span class="built_in">any</span></span>) =&gt;</span> {</span><br><span class="line">                        <span class="title function_">resolve</span>(res_img);</span><br><span class="line">                        uni.<span class="title function_">hideLoading</span>();</span><br><span class="line">                    },</span><br><span class="line">                    <span class="attr">fail</span>: <span class="function">(<span class="params">err_img: <span class="built_in">any</span></span>) =&gt;</span> {</span><br><span class="line">                        <span class="title function_">reject</span>(err_img);</span><br><span class="line">                        uni.<span class="title function_">showToast</span>({ <span class="attr">title</span>: err_title, <span class="attr">icon</span>: <span class="string">'error'</span>, <span class="attr">duration</span>: <span class="number">1000</span> });</span><br><span class="line">                    },</span><br><span class="line">                });</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    })</span><br><span class="line">}</span><br><span class="line"><span class="keyword">export</span> { uploadImage }</span><br></pre></td></tr></tbody></table></figure><p>小程序的static不能有中文路径，否则在真机预览中图片将无法显示</p>]]></content>
      
      
      <categories>
          
          <category> 操作指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sass </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序</title>
      <link href="/post/4618cb0a.html"/>
      <url>/post/4618cb0a.html</url>
      
        <content type="html"><![CDATA[<h2 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h2><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><h5 id="与网页开发的区别"><a href="#与网页开发的区别" class="headerlink" title="与网页开发的区别"></a>与网页开发的区别</h5><ol><li>运行环境不同</li></ol><p>​        网页运行在浏览器环境，小程序运行在微信环境</p><ol start="2"><li>api不同</li></ol><p>​        微信小程序无法获取bom dom的api，但可以调用微信的提供的扫码、支付等api</p><ol start="3"><li><p>开发模式不同</p><p>网页：浏览器+代码编辑器</p><p>小程序：申请开发者账号，安装小程序开发者工具，创建项目</p></li></ol><h5 id="注册开发者账号"><a href="#注册开发者账号" class="headerlink" title="注册开发者账号"></a>注册开发者账号</h5><p><a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com/</a></p><p>进入网址，点击注册，选择小程序</p><p>注册账号-邮箱验证-登记个人信息</p><h5 id="获取小程序appid"><a href="#获取小程序appid" class="headerlink" title="获取小程序appid"></a>获取小程序appid</h5><p>登陆<a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com/</a></p><p>开发-开发设置-查看appid  （创建小程序需要用到该id）</p><h5 id="安装开发者工具"><a href="#安装开发者工具" class="headerlink" title="安装开发者工具"></a>安装开发者工具</h5><p><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/devtools.html">https://developers.weixin.qq.com/miniprogram/dev/devtools/devtools.html</a></p><p>点击工具选项卡</p><p>下载最新版本</p><p>扫码登录</p><p><code>默认机型为iphone5</code> 建议修改为 iPhone678并调整显示比例 </p><h5 id="项目基本构成"><a href="#项目基本构成" class="headerlink" title="项目基本构成"></a>项目基本构成</h5><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-09-16_16-11-27.png" alt="Snipaste_2022-09-16_16-11-27"></p><h5 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h5><p>在app.json 的pages中，新增路径，会自动创建对应的页面文件</p><p>调整app.json 的pages的顺序可以修改项目的首页，默认把排第一的渲染为首页<img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-09-16_16-46-51.png" alt="Snipaste_2022-09-16_16-46-51"></p><h4 id="常用控件"><a href="#常用控件" class="headerlink" title="常用控件"></a>常用控件</h4><h5 id="view组件的基本使用"><a href="#view组件的基本使用" class="headerlink" title="view组件的基本使用"></a>view组件的基本使用</h5><blockquote><p>container 是微信开发程序的语义词 ，去类名要避免使用</p></blockquote><p>=网页布局的div</p><p>scroll-view 是可以滚动的view，scroll-x和scroll-y定义横向和纵向滚动</p><p><code>使用时需要给scroll-view添加高度或宽度</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">scroll-x</span> <span class="attr">scrool-y</span>&gt;</span><span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="swiper和swiper-item轮播组件"><a href="#swiper和swiper-item轮播组件" class="headerlink" title="swiper和swiper-item轮播组件"></a>swiper和swiper-item轮播组件</h5><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">swiper</span> <span class="attr">indicator-active-color</span>=<span class="string">"red"</span> <span class="attr">indicator-dots</span> <span class="attr">indicator-color</span>=<span class="string">"blue"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span>1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-09-16_17-17-29.png" alt="Snipaste_2022-09-16_17-17-29"></p><h5 id="常用文本组件"><a href="#常用文本组件" class="headerlink" title="常用文本组件"></a>常用文本组件</h5><p>text</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">长按选中文本效果 </span><br><span class="line">selectabel、user-select都可以实现</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">selectabel</span>&gt;</span>长安即可选中<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>富文本 rich-text</p><p>类似v-html，可以解析html标签</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rich-text</span> <span class="attr">nodes</span>=<span class="string">"&lt;h1 style='color:red'&gt; 我能被解析 &lt;/h1&gt;&gt;&lt;/rich-text&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><p>bottom组件</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bottom</span> <span class="attr">mini</span> <span class="attr">type</span>=<span class="string">'default/warn/primary'</span> <span class="attr">plain</span> &gt;</span>11<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">size='mini' 为小尺寸按钮  plain 为镂空按钮</span><br></pre></td></tr></tbody></table></figure><p>image组件</p><p>默认有宽度</p><p>mode属性可以指定图片裁剪和缩放<img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-09-16_17-17-29.png" alt="Snipaste_2022-09-16_17-17-29"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">''</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="小程序的api"><a href="#小程序的api" class="headerlink" title="小程序的api"></a>小程序的api</h2><p>官方把api分为了事件监听api 、同步api、异步api<img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-09-16_17-17-29.png" alt="Snipaste_2022-09-16_17-17-29"></p><h3 id="WXML模板语法"><a href="#WXML模板语法" class="headerlink" title="WXML模板语法"></a>WXML模板语法</h3><h4 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h4><p>类似vue3，在页面对应的js文件的data中定义即可</p><p>插值语法：</p><p>不同：</p><p>vue绑定数据使用v-bind</p><p>小程序直接使用插值语法</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//vue3 </span></span><br><span class="line">:src=<span class="string">'date'</span></span><br><span class="line"><span class="comment">//小程序</span></span><br><span class="line">src=<span class="string">'{{ date }}'</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><p>常用事件</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919152134926.png" alt="image-20220919152134926"></p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919152359300.png" alt="image-20220919152359300"></p><h5 id="bindtap语法格式"><a href="#bindtap语法格式" class="headerlink" title="bindtap语法格式"></a>bindtap语法格式</h5><ol><li>声明组件</li><li>在组件上绑定bindtap函数</li><li>去js文件page中定义函数，可以接受一个事件参数对象(e)</li></ol><h5 id="this-setData"><a href="#this-setData" class="headerlink" title="this.setData({  })"></a>this.setData({  })</h5><p>给data中的数据赋新值</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919153226236.png" alt="image-20220919153226236"></p><h5 id="小程序事件传参"><a href="#小程序事件传参" class="headerlink" title="小程序事件传参"></a>小程序事件传参</h5><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919153347076.png" alt="image-20220919153347076"></p><p>无法在定义函数的括号内传参</p><p>传过去的参数为 <code>info：2</code></p><p>在函数内使用<code>event.target.dataset</code>.参数名可以拿到传过来的参数·</p><h5 id="bindinput"><a href="#bindinput" class="headerlink" title="bindinput"></a>bindinput</h5><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919154353697.png" alt="image-20220919154353697"></p><h4 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h4><h5 id="wx：if"><a href="#wx：if" class="headerlink" title="wx：if"></a>wx：if</h5><p>类似v-if</p><p>搭配 <code>wx：elif </code> <code>wx：else</code> 使用</p><p>搭配<block></block>使用</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919155121405.png" alt="image-20220919155121405"></p><h5 id="hidden"><a href="#hidden" class="headerlink" title="hidden"></a>hidden</h5><p>hidden也能控制元素的现实和隐藏  <code>hidden='{{}}'</code></p><p> 条件为真则隐藏，假则渲染，默认为真</p><h5 id="wx-if-和hidden的区别"><a href="#wx-if-和hidden的区别" class="headerlink" title="wx:if 和hidden的区别"></a>wx:if 和hidden的区别</h5><p>wx:if是动态移除元素hidden是给元素加样式</p><p>类似v-if和v-show</p><p>频繁切换时使用hidden，减少性能消耗</p><h4 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h4><h5 id="wx-for"><a href="#wx-for" class="headerlink" title="wx:for"></a>wx:for</h5><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919160038396.png" alt="image-20220919160038396"></p><p>使用<code>wx:for-item="" </code> <code> wx:for-index=""</code>可以给index和item自定义名字（插值语法的名字）<code> 没卵用</code></p><p>使用<code>wx:key</code>指定唯一key值,提高渲染效率  <code> wx:key='id'</code></p><h3 id="wxss模板样式"><a href="#wxss模板样式" class="headerlink" title="wxss模板样式"></a>wxss模板样式</h3><p>具有css的大部分特性，同时还对css进行了扩充和修改</p><ol><li>rpx尺寸单位</li><li>@import样式引入</li></ol><p>rpx 是微信小程序独有，解决屏幕适配问题</p><p>样式导入 <code>@import "相对路径";</code></p><h4 id="全局和局部"><a href="#全局和局部" class="headerlink" title="全局和局部"></a>全局和局部</h4><p>app.wxss里的样式都是全局样式，可以作用于所有页面</p><p>全局样式和局部样式冲突时，优先局部样式，只有全局样式权重大于局部时才会覆盖</p><h4 id="全局配置文件"><a href="#全局配置文件" class="headerlink" title="全局配置文件"></a>全局配置文件</h4><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919162729931.png" alt="image-20220919162729931"></p><h5 id="window配置"><a href="#window配置" class="headerlink" title="window配置"></a>window配置</h5><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919163011555.png" alt="image-20220919163011555"></p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919163202232.png" alt="image-20220919163202232"></p><h4 id="tabBar"><a href="#tabBar" class="headerlink" title="tabBar"></a>tabBar</h4><p>用于多页面切换的功能</p><ul><li>tabBar最少两个最多五个</li><li>渲染顶部tabBar时，不显示ico，只显示文本<img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919164729822.png" alt="image-20220919164729822"></li></ul><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919164749926.png" alt="image-20220919164749926"></p><p>list必填，其中的每一项又有如下配置</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919164908214.png" alt="image-20220919164908214"></p><p><code>tabBar的页面需要在page中放在最前面</code><br>tabBar配置样例 </p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919165242709.png" alt="image-20220919165242709"></p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919165436793.png" alt="image-20220919165436793"></p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919165703652.png" alt="image-20220919165703652"></p><h3 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h3><p>只能请求https类型的接口</p><p>必须将接口添加到信任列表中</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919170516518.png" alt="image-20220919170516518"></p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919170708204.png" alt="image-20220919170708204"></p><h4 id="发起GET请求"><a href="#发起GET请求" class="headerlink" title="发起GET请求"></a>发起GET请求</h4><p>调用wx.request()</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919171428037.png" alt="image-20220919171428037"></p><p>发起post请求与get类似，将method改成post即可 </p><h4 id="跳过request合法域名检验"><a href="#跳过request合法域名检验" class="headerlink" title="跳过request合法域名检验"></a>跳过request合法域名检验<img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919172213521.png" alt="image-20220919172213521"></h4><p>仅在开发、调试阶段使用</p><h5 id="小程序不存在跨域问题"><a href="#小程序不存在跨域问题" class="headerlink" title="小程序不存在跨域问题"></a>小程序不存在跨域问题</h5><p>ajax技术核心是依赖于浏览器的XMLHttpRequest，小程序打的宿主环境是微信，不存在ajax请求</p><h3 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h3><h5 id="应用的生命周期"><a href="#应用的生命周期" class="headerlink" title="应用的生命周期"></a>应用的生命周期</h5><h5 id=""><a href="#" class="headerlink" title=""></a><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220920135102753.png" alt="image-20220920135102753"></h5><h5 id="页面的生命周期"><a href="#页面的生命周期" class="headerlink" title="页面的生命周期"></a>页面的生命周期</h5><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220920135510005.png" alt="image-20220920135510005"></p><h3 id="页面导航"><a href="#页面导航" class="headerlink" title="页面导航"></a>页面导航</h3><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220920130106184.png" alt="image-20220920130106184"></p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220920130424119.png" alt="image-20220920130424119"></p><p>导航到非tabBar时，open-type=“navigate” (默认就是这个，可以省略<img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220920130759443.png" alt="image-20220920130759443">)</p><h4 id="导航传参"><a href="#导航传参" class="headerlink" title="导航传参"></a>导航传参</h4><p>声明式传参<img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220920131143608.png" alt="image-20220920131143608"></p><p>编程式传参</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220920131319897.png" alt="image-20220920131319897"></p><p>onLoad中接收参数</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220920131553006.png" alt="image-20220920131553006"></p><p>一般会选择在data新建一个数组用于接收参数，在onLoad里面使用setData函数赋值给新数组</p><h3 id="页面事件"><a href="#页面事件" class="headerlink" title="页面事件"></a>页面事件</h3><h4 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h4><p>json文件的<code>enablePullDownRefresh：true</code> (分为局部和全局)</p><p>backgroundColor</p><p>backgroundTextStyle</p><h5 id="监听下拉刷新事件"><a href="#监听下拉刷新事件" class="headerlink" title="监听下拉刷新事件"></a>监听下拉刷新事件</h5><p> js文件onPullDownRefresh</p><h5 id="停止下拉刷新"><a href="#停止下拉刷新" class="headerlink" title="停止下拉刷新"></a>停止下拉刷新</h5><p>调用 <code>wx.stopPullDownRefresh( )</code></p><h4 id="上拉触底事件"><a href="#上拉触底事件" class="headerlink" title="上拉触底事件"></a>上拉触底事件</h4><p>类似实现分页功能，上拉加载更多数据</p><h5 id="监听上拉事件"><a href="#监听上拉事件" class="headerlink" title="监听上拉事件"></a>监听上拉事件</h5><p>js文件中onReachBottom( ){ }  （默认生成）</p><p>对上拉触底进行节流处理</p><p> <img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220920134338300.png" alt="image-20220920134338300"></p><h4 id="添加loading效果"><a href="#添加loading效果" class="headerlink" title="添加loading效果"></a>添加loading效果</h4><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220920133949479.png" alt="image-20220920133949479"></p><h4 id="wxs脚本"><a href="#wxs脚本" class="headerlink" title="wxs脚本"></a>wxs脚本</h4><p>微信wxs代码可以编写在<wxs>标签内<br><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220920140147743.png" alt="image-20220920140147743"></wxs></p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220920140329558.png" alt="image-20220920140329558"></p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220920140519998.png" alt="image-20220920140519998"></p><p>wxs应用场景就是过滤器,搭配插值语法使用,不能作为组件的事件回调函数</p><p>wxs不能调用js定义的函数， 不能使用微信提供的api</p><h2 id="基础加强"><a href="#基础加强" class="headerlink" title="基础加强"></a>基础加强</h2><h2 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h2><h4 id="组件创建"><a href="#组件创建" class="headerlink" title="组件创建"></a>组件创建</h4><p>根目录中，创建components文件夹</p><p>新建test1文件夹，一个文件夹存放一个组件，这样做结构明了</p><p>在test文件夹上右键选择新建component，输入名称后即可生成对应文件</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220922110836739.png" alt="image-20220922110836739"></p><h4 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h4><h5 id="局部引用"><a href="#局部引用" class="headerlink" title="局部引用"></a>局部引用</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//在页面的.json文件中</span><br><span class="line">{</span><br><span class="line">  "usingCoponents":{</span><br><span class="line">"组件名字":"/组件路径"</span><br><span class="line">   }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">//在页面中</span><br><span class="line">&lt;组件名字&gt;&lt;/组件名字&gt;</span><br></pre></td></tr></tbody></table></figure><h5 id="全局引用"><a href="#全局引用" class="headerlink" title="全局引用"></a>全局引用</h5><p>在app.json中使用usingComponents，即可在页面直接使用</p><h4 id="组件和页面的区别"><a href="#组件和页面的区别" class="headerlink" title="组件和页面的区别"></a>组件和页面的区别</h4><p>组件的.json文件中需要声明<code>"component"：true</code>属性</p><p>组件的.js文件调用的是<code>"Component()"</code>函数，页面调用的是<code>Page()</code></p><p>组件的处理函数需要写到<code>methods</code>节点中</p><h3 id="组件的样式"><a href="#组件的样式" class="headerlink" title="组件的样式"></a>组件的样式</h3><p>组件的样式具有样式隔离</p><p>不会影响到其他组件的样式和小程序的样式</p><h5 id="ps"><a href="#ps" class="headerlink" title="ps:"></a>ps:</h5><p><code>app.wxss</code>的全局样式对组件无效</p><p>只有<code>class</code>选择器样式隔离效果，id选择器、属性选择器、标签选择器不受影响</p><p>在组件和引用组件的页面使用class选择器，不要使用<code>id选择器、属性选择器、标签选择器</code></p><h3 id="自定义组件的数据、方法、属性"><a href="#自定义组件的数据、方法、属性" class="headerlink" title="自定义组件的数据、方法、属性"></a>自定义组件的数据、方法、属性</h3><h4 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h4><p>组件私有数据定义到<code>data{}</code>中</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>事件处理函数和自定义方法需要定义到<code>methods:{ }</code>节点</p><p>自定义方法命名时可以以下划线_开头，与事件处理函数作区分</p><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><h5 id="properties-（一般用于存储外界传过来的数据）"><a href="#properties-（一般用于存储外界传过来的数据）" class="headerlink" title="properties （一般用于存储外界传过来的数据）"></a>properties （一般用于存储外界传过来的数据）</h5><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220922114324652.png" alt="image-20220922114324652"></p><p><code>properties和data在本质上没有任何区别,可使用的方法也一样</code></p><h3 id="数据监听器"><a href="#数据监听器" class="headerlink" title="数据监听器"></a>数据监听器</h3><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220922115008798.png" alt="image-20220922115008798"></p><p>属性很多时，可以使用<code>obj.**</code>来监听对象中的所有属性</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220922120341836.png" alt="image-20220922120341836"></p><h3 id="纯数据字段"><a href="#纯数据字段" class="headerlink" title="纯数据字段"></a>纯数据字段</h3><p>不会展示在页面上，也不会传递给其他组件的data字段</p><p>优点：提高页面的更新性能</p><h4 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h4><p>options：{</p><p>​    pureDataPattern：正则</p><p>}</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220922120725840.png" alt="image-20220922120725840"></p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><h4 id="小程序的生命周期"><a href="#小程序的生命周期" class="headerlink" title="小程序的生命周期"></a>小程序的生命周期</h4><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220922121332388.png" alt="image-20220922121332388"></p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220922121624152.png" alt="image-20220922121624152"></p><h5 id="小程序生命周期函数的定义"><a href="#小程序生命周期函数的定义" class="headerlink" title="小程序生命周期函数的定义"></a>小程序生命周期函数的定义</h5><p>推荐使用lifetimes节点定义</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220922121709646.png" alt="image-20220922121709646"></p><h4 id="组件所在页面中的生命周期"><a href="#组件所在页面中的生命周期" class="headerlink" title="组件所在页面中的生命周期"></a>组件所在页面中的生命周期</h4><p><code>show()、hide()、 resize()</code></p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220922121924283.png" alt="image-20220922121924283"></p><h5 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h5><p>pageLifetimes:{ }</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220922122036438.png" alt="image-20220922122036438"></p><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><p>在wxml结构中，提供一个<slot>,用于承载内容</slot></p><p>启用多个插槽</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220922123521182.png" alt="image-20220922123521182"></p><p>使用多个插槽时需要指定名字</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//在组件</span><br><span class="line">&lt;slot name="chachao"&gt;&lt;/slot&gt;</span><br><span class="line"></span><br><span class="line">//在页面</span><br><span class="line">&lt;view slot='chachao'&gt;&lt;/view&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><h4 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h4><h4 id="事件绑定-1"><a href="#事件绑定-1" class="headerlink" title="事件绑定"></a>事件绑定</h4><p>步骤</p><ol><li>在父组件js中，定义一个函数</li><li>在父组件wxml中，通过自定义事件 <code>bind:自定义事件名="函数" </code>传递给子组件</li><li>子组件js中，通过<code>this.triggerEvent('自定义事件名',{参数数组})</code>，将参数传给父组件</li><li>父组件的js中，通过调用函数<code>function(e) {e.detail}</code> 获取子组件传过来的数据 </li></ol><h4 id="获取组件实例"><a href="#获取组件实例" class="headerlink" title="获取组件实例"></a>获取组件实例</h4><p><code>this.selectComponent(.名字 或 #名字)</code></p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220922190733849.png" alt="image-20220922190733849"></p><h2 id="behaviors-类似mixins"><a href="#behaviors-类似mixins" class="headerlink" title="behaviors (类似mixins)"></a>behaviors (类似mixins)</h2><p>不常用</p><h2 id="小程序npm包"><a href="#小程序npm包" class="headerlink" title="小程序npm包"></a>小程序npm包</h2><p>不支持node.js内置包、不支持依赖于c++插件的包</p><p>能供小程序使用的包不多</p><h3 id="Vant-Weapp"><a href="#Vant-Weapp" class="headerlink" title="Vant Weapp"></a>Vant Weapp</h3><p>小程序开发组件库</p><p>文档 ：ttps://vant-contrib.gitee.io/vant-weapp/#/home</p><p>在app.wxss中，写入css变量，即可对全局生效</p><p>打开官方文档的配置文件，style中可以查看对应的变量名字</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*app.wxss*/</span></span><br><span class="line">page{</span><br><span class="line"><span class="attr">--button-danger-background-color</span>:<span class="number">#c00000</span>;</span><br><span class="line"><span class="attr">--button-danger-border-color</span>:<span class="number">#c00000</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*page是页面的根节点*/</span></span><br></pre></td></tr></tbody></table></figure><h3 id="API-Promise化"><a href="#API-Promise化" class="headerlink" title="API Promise化"></a>API Promise化</h3><p>默认小程序异步api都是基于回调函数实现的，容易造成回调地域，代码可读性、维护性差</p><p>api promise化是指通过额外的配置，升级改造为基于promise的异步api</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save miniprogram-api-promise</span><br></pre></td></tr></tbody></table></figure><p>在点击-工具-构建npm之前，先把原先的miniprogram_npm，在重新生成新的<code>miniprogram_npm</code>文件夹，以免避免错误。</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220924125834437.png" alt="image-20220924125834437"></p><p>在之后使用wx.p来使用promise化的api</p><h3 id="全局数据共享（Mobx）"><a href="#全局数据共享（Mobx）" class="headerlink" title="全局数据共享（Mobx）"></a>全局数据共享（Mobx）</h3><p>解决组件之间数据共享的问题，相当于vuex</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save mobx-miniprogram mobx-miniprogram-bindings</span><br></pre></td></tr></tbody></table></figure><p>安装完成后删除并重新生成<code>miniprogram_npm</code>文件夹</p><p>新建<code>store/store.js</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在store.js中 创建store的实例对象</span></span><br><span class="line"><span class="keyword">import</span> {observable,action} <span class="keyword">from</span> <span class="string">"mobx-miniprogram"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store =<span class="title function_">observable</span>({</span><br><span class="line">    <span class="comment">//数据字段  </span></span><br><span class="line">    <span class="comment">//直接定义</span></span><br><span class="line">    属性<span class="number">1</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">shuxing</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="comment">//计算属性 get修饰只读</span></span><br><span class="line">    get 计算属性名(){</span><br><span class="line">        <span class="keyword">return</span>  结果</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//action方法  修改store数据的值</span></span><br><span class="line">    方法名字:<span class="title function_">action</span>(<span class="keyword">function</span>(<span class="params"> 可接受值 </span>){ })</span><br><span class="line">    </span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>在页面中使用stroe</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220924131845528.png" alt="image-20220924131845528"></p><p>在组件中使用store</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220924132656659.png" alt="image-20220924132656659"></p><h2 id="分包"><a href="#分包" class="headerlink" title="分包"></a>分包</h2><p>指将一个完整的小程序项目，按照不同需求划分为不同的子包，在构建时打包成不同的分包，用户在使用时按需进行加载</p><p>可以优化首次的下载时间</p><p>更适合团队合作</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220924142335720.png" alt="image-20220924142335720"></p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220924142449706.png" alt="image-20220924142449706"></p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220924142503985.png" alt="image-20220924142503985"></p><h4 id="配置分包"><a href="#配置分包" class="headerlink" title="配置分包"></a>配置分包</h4><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4>]]></content>
      
      
      <categories>
          
          <category> 操作指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鸡鸡静听2.0 项目设计</title>
      <link href="/post/3ccadc1b.html"/>
      <url>/post/3ccadc1b.html</url>
      
        <content type="html"><![CDATA[<h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><h3 id="使用工具："><a href="#使用工具：" class="headerlink" title="使用工具："></a>使用工具：</h3><p><strong><code>typeScript+vue3+setup语法糖+vite</code></strong></p><h3 id="大概："><a href="#大概：" class="headerlink" title="大概："></a>大概：</h3><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-26_17-07-32.png"></p><h3 id="主要实现的功能："><a href="#主要实现的功能：" class="headerlink" title="主要实现的功能："></a>主要实现的功能：</h3><ol><li>音乐查找及播放</li><li>轮播图</li><li>新歌速递</li><li>推荐专辑</li><li>L显示热评</li></ol><h2 id="项目板块划分"><a href="#项目板块划分" class="headerlink" title="项目板块划分"></a>项目板块划分</h2><p><code>头部 header</code>      <code>中间（核心）=左边+右边</code>     <code>底部footer</code></p><ul><li><p> <code>发现音乐      FoundMusic</code></p></li><li><p>轮播图    LunBoTu</p></li><li><p>新歌速递     NewSongs</p></li><li><p>推荐歌单     RecommendPlaylist</p></li><li><p><code>搜索详情      Search</code> </p></li><li><p><code>音乐详情页   MusicDetail</code> </p></li></ul><h2 id="开始实操"><a href="#开始实操" class="headerlink" title="开始实操"></a>开始实操</h2><h3 id="1-1项目初始化"><a href="#1-1项目初始化" class="headerlink" title="1.1项目初始化"></a>1.1项目初始化</h3><p>axios<code>文件夹http</code>、pinia<code>文件夹store</code>、vue-router<code>文件夹router</code>、主要页面<code>文件夹vies</code>、element-plus、less</p><h3 id="1-2项目布局"><a href="#1-2项目布局" class="headerlink" title="1.2项目布局"></a>1.2项目布局</h3><ol><li>app中放置组件==<index>== 存放播放器</index></li><li><index>之中存放==<header>====<main>====<footer>==</footer></main></header></index></li><li>Main&gt;之中存放==<left>====<right>==</right></left></li></ol><h3 id="2-1-使用VERCEL部署网易云音乐api"><a href="#2-1-使用VERCEL部署网易云音乐api" class="headerlink" title="2.1 使用VERCEL部署网易云音乐api"></a>2.1 使用VERCEL部署网易云音乐api</h3><p><img src="C:\Users\22371\AppData\Roaming\Typora\typora-user-images\image-20220526194248771.png" alt="image-20220526194248771"></p><ol><li>先使用github账号登陆vercel   <a href="https://vercel.com/">链接</a></li><li>打开网易云api项目，点右上角fork <a href="https://github.com/2ws-w/">链接</a></li></ol><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220526194349513.png" alt="image-20220526194349513"></p><ol start="3"><li>在vercel新建项目</li></ol><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220526194413384.png"></p><ol start="3"><li>选择网易云api</li></ol><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220526194434359.png" alt="image-20220526194434359"></p><ol start="3"><li>名字自取，其他可以不改变，点击deploy</li></ol><ol start="3"><li><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220526194456591.png" alt="image-20220526194456591"></li></ol><p>6.完成</p><p><img src="C:\Users\22371\AppData\Roaming\Typora\typora-user-images\image-20220526194510636.png" alt="image-20220526194510636"></p><ol start="7"><li><a href="https://netease-cloud-music-api-pearl-five.vercel.app/">项目链接</a></li></ol><h3 id="3-1-搜索板块"><a href="#3-1-搜索板块" class="headerlink" title="3.1 搜索板块"></a>3.1 搜索板块</h3><ol><li>先调用网易云 api</li><li>检查输入框是否有内容，添加回车事件获取关键词<code>keyword</code></li><li>为列表添加点击事件，跳转到音乐详情页，并传入id参数</li></ol><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> keyword = <span class="title function_">ref</span>(<span class="string">' '</span>);</span><br><span class="line"><span class="keyword">let</span> keylist = <span class="title function_">reactive</span>(&lt;<span class="built_in">any</span>&gt;[]);</span><br><span class="line"><span class="keyword">const</span> id = <span class="title function_">ref</span>(<span class="string">'11'</span>);</span><br><span class="line"><span class="title function_">onMounted</span>(<span class="keyword">async</span> () =&gt; {</span><br><span class="line">    <span class="comment">// 传入keyword给 api,并用keylist存贮 获取列表</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">onSearch</span> = <span class="keyword">async</span> (<span class="params">id: <span class="built_in">any</span></span>) =&gt; {</span><br><span class="line">        <span class="keyword">await</span> <span class="title class_">SearchData</span>(keyword.<span class="property">value</span>)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>.<span class="property">result</span>.<span class="property">songs</span>);</span><br><span class="line">                keylist.<span class="title function_">splice</span>(<span class="number">0</span>);</span><br><span class="line">                keylist.<span class="title function_">push</span>(res.<span class="property">data</span>.<span class="property">result</span>.<span class="property">songs</span>);</span><br><span class="line">            })</span><br><span class="line">            .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> {</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">            });</span><br><span class="line">    };</span><br><span class="line">    <span class="comment">//先检查输入框是否有内容，若果有则渲染到页面上</span></span><br><span class="line">    <span class="comment">// 在设置回车事件，根据用户输入值更新页面</span></span><br><span class="line">    <span class="keyword">const</span> myinput = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">".serachInput"</span>) <span class="keyword">as</span> <span class="title class_">HTMLInputElement</span>;</span><br><span class="line">    keyword.<span class="property">value</span> = myinput.<span class="property">value</span></span><br><span class="line">    <span class="title function_">onSearch</span>(keyword.<span class="property">value</span>);</span><br><span class="line">    myinput.<span class="title function_">addEventListener</span>(<span class="string">"keydown"</span>, <span class="keyword">function</span> (<span class="params">e</span>) {</span><br><span class="line">        <span class="keyword">if</span> (e.<span class="property">key</span> == <span class="string">"Enter"</span>) {</span><br><span class="line">            <span class="comment">// 获取输入的值</span></span><br><span class="line">            <span class="comment">// const serachInput = document.querySelector(".serachInput") as HTMLInputElement;</span></span><br><span class="line">            keyword.<span class="property">value</span> = myinput.<span class="property">value</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(id.<span class="property">value</span>);</span><br><span class="line">            <span class="title function_">onSearch</span>(keyword.<span class="property">value</span>);</span><br><span class="line">            router.<span class="title function_">push</span>(<span class="string">'/Search'</span>)</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="3-2-音乐详情页"><a href="#3-2-音乐详情页" class="headerlink" title="3.2 音乐详情页"></a>3.2 音乐详情页</h3><h4 id="更新歌曲详情"><a href="#更新歌曲详情" class="headerlink" title="更新歌曲详情"></a>更新歌曲详情</h4><ol><li>接收传入的id参数</li><li>根据id调用api获取音乐详情</li><li>更新时间、歌词、歌手信息等</li></ol><h4 id="歌词"><a href="#歌词" class="headerlink" title="歌词"></a>歌词</h4><ol><li>使用网易云api获取的歌词是入图的形式，需要手动将时间和歌词分离</li></ol><p><img src="D:\文档\桌面\typora\images\Snipaste_2022-05-27_00-45-04.png"></p><ol start="2"><li><p>调用api获取歌词，并将时间与歌词文字拆离</p><figure class="highlight tex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const getgeci = () =&gt; {</span><br><span class="line">  GetLyric(id).then((res) =&gt; {</span><br><span class="line">    music.lyric = res.data.lrc.lyric</span><br><span class="line">    let obj = {}</span><br><span class="line">    let reg = /<span class="keyword">\[</span>(.*?)](.*)/g;</span><br><span class="line">    //使用正则表达式拆分</span><br><span class="line">    music.lyric.replace(reg, (a, b, c) =&gt; {</span><br><span class="line">      b = b.slice(0, 5)//时间取前4位便于计算</span><br><span class="line">      obj[b] = c;</span><br><span class="line">    })</span><br><span class="line">     // a是原数据，b是时间，c是歌词</span><br><span class="line">    geci2.value = obj;</span><br><span class="line">    console.log("geci2", geci2.value);</span><br><span class="line">  })</span><br></pre></td></tr></tbody></table></figure><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"geci"</span>&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"lyric"</span> <span class="attr">v-for</span>=<span class="string">"(item, key, i) in geci2"</span> <span class="attr">:key</span>=<span class="string">"i"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          {{ item }}</span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>其中 ，<code>item </code>是歌词  <code>key</code>是时间</p></blockquote></li><li><p>实现歌词高亮</p></li></ol><p><code>ontimeupdate 事件在视频/音频（audio/video）当前的播放位置发送改变时触发</code></p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> audio = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">'audio'</span>) <span class="keyword">as</span> <span class="title class_">HTMLAudioElement</span>;</span><br><span class="line">   audio.<span class="property">ontimeupdate</span> = <span class="function">() =&gt;</span> {</span><br><span class="line">     <span class="comment">//将获取的时间转化成和歌词时间一样的格式</span></span><br><span class="line">     <span class="keyword">let</span> time = <span class="title function_">transTime</span>(audio.<span class="property">currentTime</span>);</span><br><span class="line">     <span class="keyword">if</span> (time <span class="keyword">in</span> obj) {</span><br><span class="line">       righttime.<span class="property">value</span> = time</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'success'</span>, righttime.<span class="property">value</span>);</span><br><span class="line">     } <span class="keyword">else</span> {</span><br><span class="line">       <span class="comment">// console.log('erro');</span></span><br><span class="line">     }</span><br></pre></td></tr></tbody></table></figure><p>==audio.currentTime==使用audio的currentTime属性获得当前的播放时间</p><p>用获取的时间与歌词列表里的时间匹配，并将匹配成攻的值赋给<code>righttime</code></p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"geci"</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"lyric"</span> <span class="attr">v-for</span>=<span class="string">"(item, key, i) in geci2"</span> <span class="attr">:key</span>=<span class="string">"i"</span> <span class="attr">:class</span>=<span class="string">"righttime == key ? 'highlight' : ' '"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          {{ item }}</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>根据<code>righttime 和 key值  的匹配结果</code> 动态添加高亮样式。</p><ol start="4"><li><p>歌词随播放时间滚动</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 歌词移动</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">lyricMove</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">  <span class="keyword">let</span> highlight = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">'highlight'</span>)[<span class="number">0</span>] <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span>;</span><br><span class="line">  <span class="keyword">const</span> geci = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">".geci"</span>) <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span>;</span><br><span class="line">  <span class="keyword">const</span> gecihezi = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">".gecihezi"</span>) <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span>;</span><br><span class="line">  <span class="keyword">if</span> (highlight) {</span><br><span class="line">    <span class="keyword">if</span> (highlight.<span class="property">offsetTop</span> &gt;= <span class="number">30</span>) {</span><br><span class="line">      <span class="comment">// 单句歌词距离顶部的距离 &gt; 30时，开始滚动</span></span><br><span class="line">      gecihezi.<span class="property">scrollTop</span> = highlight.<span class="property">offsetTop</span> - <span class="number">130</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="项目中遇到的问题"><a href="#项目中遇到的问题" class="headerlink" title="项目中遇到的问题"></a>项目中遇到的问题</h2><ol><li>使用官方推荐的获取url的方法时警告</li></ol><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio controls&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">source</span> <span class="attr">:src</span>=<span class="string">"` https://music.163.com/song/media/outer/url?id=${id}.mp3`"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-26_20-58-47.png"></p><p>​            <code>不影响实际项目运行！！</code></p><ol start="2"><li>vue3中的reactive响应式数据，不能直接复制</li></ol><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一:使用ref定义</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="title function_">ref</span>({})</span><br><span class="line">a.<span class="property">value</span>=数组或对象;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二：使用push()</span></span><br><span class="line"><span class="keyword">const</span> b=<span class="title function_">reactive</span>([])</span><br><span class="line">b.<span class="title function_">push</span>(...数组)</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法三：在reactive里面再封装一个{}</span></span><br><span class="line"><span class="keyword">const</span> c= <span class="title function_">reactive</span>({</span><br><span class="line">    <span class="attr">arr</span>:[]</span><br><span class="line">})</span><br><span class="line">c.<span class="property">arr</span>=数组或对象</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>不会处理ts产生的这种类型错误提醒（不影响项目运行）。</li></ol><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-27_18-37-38.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鸡鸡静听 1.0</title>
      <link href="/post/305ea91f.html"/>
      <url>/post/305ea91f.html</url>
      
        <content type="html"><![CDATA[<h2 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h2><p>解决目前鸡鸡静听存在的问题，加深对vue全家桶的理解</p><h2 id="目前存在的问题："><a href="#目前存在的问题：" class="headerlink" title="目前存在的问题："></a>目前存在的问题：</h2><ol><li>进入页面时，现有项目框架，某些板块图片第一时间不会出来</li><li>网易云api调用问题，大部分歌曲不能正常播放</li></ol><h2 id="还未实现的功能："><a href="#还未实现的功能：" class="headerlink" title="还未实现的功能："></a>还未实现的功能：</h2><ol><li>歌词的滚动</li><li>进度条拖拽</li></ol><h2 id="网易云接口"><a href="#网易云接口" class="headerlink" title="网易云接口"></a>网易云接口</h2><h3 id="部署到"><a href="#部署到" class="headerlink" title="部署到"></a>部署到</h3><p><a href="https://netease-cloud-music-api-pearl-five.vercel.app/">链接</a></p><h3 id="目前的使用"><a href="#目前的使用" class="headerlink" title="目前的使用"></a>目前的使用</h3><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入axios实例</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'../request/index'</span></span><br><span class="line"><span class="comment">// import request from './request';</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 歌曲搜索</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">SearchData</span> = (<span class="params">params: <span class="built_in">any</span></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`search?limit=20&amp;keywords=<span class="subst">${params}</span>`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 歌曲详情</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">GetSongDetail</span> = (<span class="params">id: <span class="built_in">any</span></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`/song/detail?ids=<span class="subst">${id}</span>`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 歌曲地址</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">GetSongUrl</span> = (<span class="params">id: <span class="built_in">any</span></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`/song/url?id=<span class="subst">${id}</span>`</span>)</span><br><span class="line"><span class="comment">// export const GetSongUrl = (id: any) =&gt; request.get(`https://music.163.com/song/media/outer/url?id=${id}.mp3`)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//检查歌曲是否可用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">CheckMusic</span> = (<span class="params">id: <span class="built_in">any</span></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`/check/music?id=<span class="subst">${id}</span>`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//新碟上新</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">NewMusic</span> = (<span class="params"></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`/top/album?offset=0&amp;limit=5&amp;year=2022&amp;month=4`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 轮播图</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Banner</span> = (<span class="params"></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`/banner?type=0`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐歌单</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Recommendplaylist</span> = (<span class="params"></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`/top/playlist`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取歌词</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">GetLyric</span> = (<span class="params">id: <span class="built_in">any</span></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`/lyric?id=<span class="subst">${id}</span>`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取歌曲评论</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">GetMusicComment</span> = (<span class="params">id: <span class="built_in">any</span></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`/comment/hot?type=0&amp;id=<span class="subst">${id}</span>`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取歌单歌曲</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">playlist</span> = (<span class="params">id: <span class="built_in">any</span></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`/ playlist/track/all?id=<span class="subst">${id}</span>`</span>)</span><br></pre></td></tr></tbody></table></figure><p>存在问题：部分歌曲无法播放</p><p><img src="D:\文档\桌面\typora\images\apieros.png"></p><p>解决办法：</p><p><code>**将 https://music.163.com/song/media/outer/url?id=id.mp3 以 src 赋予 Audio 即可播放</code>**</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio controls&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">source</span> <span class="attr">:src</span>=<span class="string">"` https://music.163.com/song/media/outer/url?id=${id}.mp3`"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><p>解决完某些音乐无法播放的问题后，出现了新的问题。</p><ol><li>新歌速递板块点进去后无法接受到id，并报错</li></ol><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-26_17-13-02.png" alt="Snipaste_2022-05-26_17-13-02"></p><ol start="2"><li>从音乐详情页面跳转至其他页面时，报错<br><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-26_17-14-22.png"></li></ol><h2 id="第一次构建项目，逻辑太过于混乱，因备考搁置了一断时间，更加看不懂了。"><a href="#第一次构建项目，逻辑太过于混乱，因备考搁置了一断时间，更加看不懂了。" class="headerlink" title="第一次构建项目，逻辑太过于混乱，因备考搁置了一断时间，更加看不懂了。"></a>第一次构建项目，逻辑太过于混乱，因备考搁置了一断时间，更加看不懂了。</h2>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vite中使用sass</title>
      <link href="/post/s27bfc3f.html"/>
      <url>/post/s27bfc3f.html</url>
      
        <content type="html"><![CDATA[<h1 id="sass在vite中的使用"><a href="#sass在vite中的使用" class="headerlink" title="sass在vite中的使用"></a>sass在vite中的使用</h1><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i sass -d</span><br></pre></td></tr></tbody></table></figure><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install sass-loader sass</span><br></pre></td></tr></tbody></table></figure><h3 id="查看package-json"><a href="#查看package-json" class="headerlink" title="查看package.json"></a>查看package.json</h3><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"devDependencies"</span>: {</span><br><span class="line">    .........</span><br><span class="line">   <span class="string">"sass"</span>: <span class="string">"^1.54.8"</span>,</span><br><span class="line">   <span class="string">"sass-loader"</span>: <span class="string">"^13.0.2"</span>,</span><br><span class="line">    .........</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><p>显示如图则为安装完成</p><h3 id="创建src-styles-main-scss文件"><a href="#创建src-styles-main-scss文件" class="headerlink" title="创建src/styles/main.scss文件"></a>创建src/styles/main.scss文件</h3><h3 id="配置-vite-config-js"><a href="#配置-vite-config-js" class="headerlink" title="配置 vite.config.js"></a>配置 vite.config.js</h3><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>({</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">css</span>: {</span><br><span class="line">    <span class="attr">preprocessorOptions</span>: {</span><br><span class="line">      <span class="attr">scss</span>: {</span><br><span class="line">        <span class="comment">// 两种方式都可以</span></span><br><span class="line">        <span class="attr">additionalData</span>: <span class="string">'@import "./src/styles/main.scss";'</span></span><br><span class="line">        <span class="comment">// additionalData: '@use "@/assets/scss/global.scss" as *;'</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>安装完成后可以自行测试</p><h3 id="需要注意的是"><a href="#需要注意的是" class="headerlink" title="需要注意的是~"></a><code>需要注意的是~</code></h3><p>在需要使用的vue组件处，style lang需写成scss ，而不是sass 否则会报错</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped lang=<span class="string">'scss'</span>&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 操作指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sass </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora基本使用</title>
      <link href="/post/a47bff3f.html"/>
      <url>/post/a47bff3f.html</url>
      
        <content type="html"><![CDATA[<h1 id="ctrl-1-一级标题"><a href="#ctrl-1-一级标题" class="headerlink" title="ctrl+1    一级标题"></a><code>ctrl+1</code>    一级标题</h1><h2 id="ctrl-2-二级标题"><a href="#ctrl-2-二级标题" class="headerlink" title="ctrl+2    二级标题"></a><code>ctrl+2</code>    二级标题</h2><h3 id="ctrl-3-三级标题"><a href="#ctrl-3-三级标题" class="headerlink" title="ctrl+3    三级标题"></a><code>ctrl+3</code>    三级标题</h3><h4 id="ctrl-4-四级标题"><a href="#ctrl-4-四级标题" class="headerlink" title="ctrl+4    四级标题"></a><code>ctrl+4</code>    四级标题</h4><h5 id="ctrl-5-五级标题"><a href="#ctrl-5-五级标题" class="headerlink" title="ctrl+5    五级标题"></a><code>ctrl+5</code>    五级标题</h5><h6 id="ctrl-6-六级标题"><a href="#ctrl-6-六级标题" class="headerlink" title="ctrl+6    六级标题"></a><code>ctrl+6</code>    六级标题</h6><p><code>ctrl+0</code>    正文</p><p><code>ctrl+b</code>    <strong>加粗</strong></p><p><code>ctrl+i</code>     <em>斜体</em></p><p><code>==需要高亮的文字==</code> ==高亮==</p><p><code>ctrl+shift+]</code> <code>或</code> <code>* + 空格</code>无序列表</p><ul><li><p>一级</p><ul><li><p>二级</p><ul><li>三级</li></ul></li><li><p>二级</p></li></ul></li><li><p>一级</p><blockquote><p><code>tab</code>    添加次级          或使用 <code>ctrl+[</code> <code>ctrl+]</code> 切换层级</p></blockquote></li></ul><p><code>ctrl+sgift+[</code> <code>或</code> <code>1.+ 空格</code> 有序列表</p><ol><li>有序列表不支持分层级</li><li>洒洒水水水水</li></ol><p><code>ctrl+shift+k</code>    代码块</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import  {} from ''</span><br></pre></td></tr></tbody></table></figure><p><code>ctrl+t</code>    表格</p><table><thead><tr><th align="center">1</th><th align="center">2</th><th align="center">3</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><blockquote><p><code> &gt;+空格</code> 我是引用 </p></blockquote><p><a href="%E7%BD%91%E5%9D%80">超链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 操作指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用VERCEL绑定自己域名？</title>
      <link href="/post/a47bfc3f.html"/>
      <url>/post/a47bfc3f.html</url>
      
        <content type="html"><![CDATA[<h1 id="如何使用VERCEL绑定自己域名？"><a href="#如何使用VERCEL绑定自己域名？" class="headerlink" title="如何使用VERCEL绑定自己域名？"></a>如何使用VERCEL绑定自己域名？</h1><p>==由于vercel提供的.app域名经常打不开，所以将其绑定我们自己的域名==</p><h5 id="1-首先，购买一个域名"><a href="#1-首先，购买一个域名" class="headerlink" title="1.首先，购买一个域名"></a>1.首先，购买一个域名</h5><p><code>此处选用阿里云购买域名</code></p><p>几块钱的就行，购买后完成实名认证。</p><h5 id="2-进入域名控制台，选择-域名列表"><a href="#2-进入域名控制台，选择-域名列表" class="headerlink" title="2.进入域名控制台，选择 域名列表"></a>2.进入域名控制台，选择 域名列表</h5><p>选择需要绑定的域名，点击<code>解析</code>  </p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-08-31_17-29-28.jpg"></p><p>点击添加记录，并将其修改为如图配置</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-08-31_17-35-59.png"></p><h5 id="3-再次返回域名列表，点击管理"><a href="#3-再次返回域名列表，点击管理" class="headerlink" title="3.再次返回域名列表，点击管理"></a>3.再次返回域名列表，点击管理</h5><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-08-31_17-38-23.png"></p><h5 id="4-点击修改DNS-修改服务器"><a href="#4-点击修改DNS-修改服务器" class="headerlink" title="4.点击修改DNS  -  修改服务器"></a>4.点击修改DNS  -  修改服务器</h5><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-08-31_17-39-35.png"></p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-08-31_17-43-40.png"></p><p>修改完后如图</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-08-31_17-45-46.png"></p><h5 id="5-打开vercel，选择你需要绑定域名的项目"><a href="#5-打开vercel，选择你需要绑定域名的项目" class="headerlink" title="5.打开vercel，选择你需要绑定域名的项目"></a>5.打开vercel，选择你需要绑定域名的项目</h5><p>选择settings</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-08-31_17-46-51.png"></p><p>选择Domains，添加域名网址，点击add</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-08-31_17-49-07.png"></p><p>等待一段时间即可</p><blockquote><p>2021 年 5 月初，<code>Vercel</code> 因为一些原因被 <code>GFW</code> 屏蔽，导致无法访问。各位可以通过更改相应的域名解析记录来恢复访问。 A 记录就从 <code>76.76.21.21</code> 改成 <code>52.76.85.65</code>，<code>CNAME</code> 记录则是从 <code>cname-vercel-dns.com.</code> 改成 <code>cname-china.vercel-dns.com.</code>；关于 A 记录，可用的 <code>IP</code> 值也可以从这个里面找：<code>Vercel</code> 可用解析记录 <code>IP</code>, 因为是 <code>gist</code>，大概要翻墙才能看。</p><p>作者：白雾茫茫丶<br>链接：<a href="https://juejin.cn/post/7111242102578610189">https://juejin.cn/post/7111242102578610189</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 操作指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> vercel </tag>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建</title>
      <link href="/post/9639fcc6.html"/>
      <url>/post/9639fcc6.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、Node-js"><a href="#一、Node-js" class="headerlink" title="一、Node.js"></a>一、Node.js</h2><p><a href="https://nodejs.org/en/">官网直接下载</a></p><h2 id="二、安装git"><a href="#二、安装git" class="headerlink" title="二、安装git"></a>二、安装git</h2><p><a href="https://git-scm.com/download/win">官网下载</a></p><h2 id="三、安装hexo"><a href="#三、安装hexo" class="headerlink" title="三、安装hexo"></a>三、安装hexo</h2><ol><li>用==管理员身份==打开命令行窗口</li></ol><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install -g hexo-cli</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>创建文件夹</li></ol><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> init myblog</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>进入到文件夹内，安装依赖</li></ol><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cd</span> myblog</span><br><span class="line">npm install</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>启动本地服务</li></ol><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> g </span><br><span class="line">hexo server</span><br></pre></td></tr></tbody></table></figure><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-29_15-48-41.png"></p><p>可以进入 <a href="http://localhost:4000/">http://localhost:4000/</a> 本地访问博客</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-29_15-54-44.png"></p><h2 id="四、部署到github"><a href="#四、部署到github" class="headerlink" title="四、部署到github"></a>四、部署到github</h2><h4 id="1-新建仓库（名字必须合规）"><a href="#1-新建仓库（名字必须合规）" class="headerlink" title="1.新建仓库（名字必须合规）"></a>1.新建仓库（名字必须合规）</h4><p>​                    仓库名限制：用户名+.github.io</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-29_16-02-40.png"></p><p><img src="D:\文档\桌面\typora\images\Snipaste_2022-05-29_16-05-13.png"></p><h4 id="2-命令行安装hexo-上传插件"><a href="#2-命令行安装hexo-上传插件" class="headerlink" title="2.命令行安装hexo 上传插件"></a>2.命令行安装hexo 上传插件</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></tbody></table></figure><h4 id="3-直接在文件夹里打开-config-yml"><a href="#3-直接在文件夹里打开-config-yml" class="headerlink" title="3.直接在文件夹里打开_config.yml"></a>3.直接在文件夹里打开<code>_config.yml</code></h4><p>找到最底部</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-29_16-12-36.png"></p><p> 修改为</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-29_16-15-47.png"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/2ws-w/2ws-w.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></tbody></table></figure><p>repo后为github仓库地址</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-29_16-14-31.png"></p><h4 id="4-推送站点到github"><a href="#4-推送站点到github" class="headerlink" title="4.推送站点到github"></a>4.推送站点到github</h4><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> d</span><br></pre></td></tr></tbody></table></figure><h4 id="5-刷新仓库即刻"><a href="#5-刷新仓库即刻" class="headerlink" title="5.刷新仓库即刻"></a>5.刷新仓库即刻</h4><h2 id="五、更换主题"><a href="#五、更换主题" class="headerlink" title="五、更换主题"></a>五、更换主题</h2><p>GitHub上搜索hexo主题或者hero自带的主题<a href="https://hexo.io/themes/%E3%80%82">https://hexo.io/themes/。</a></p><p>根据文档操作即可</p><p>一般是先将代码下载并解压到theme文件夹下</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-29_21-51-10.png"></p><p>博客及主题修改 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">参考</a></p>]]></content>
      
      
      <categories>
          
          <category> 操作指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3全家桶 快速初始化</title>
      <link href="/post/9ed18c6e.html"/>
      <url>/post/9ed18c6e.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://v3.cn.vuejs.org/">vue3官方文档</a></p><h2 id="vite使用及创建项目"><a href="#vite使用及创建项目" class="headerlink" title="vite使用及创建项目"></a>vite使用及创建项目</h2><p><a href="https://vitejs.cn/">官方文档</a></p><p>使用npm</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vite@latest</span><br></pre></td></tr></tbody></table></figure><p>使用 Yarn</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn create vite</span><br></pre></td></tr></tbody></table></figure><p>使用 PNPM</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm create vite</span><br></pre></td></tr></tbody></table></figure><blockquote><p><em>根据提示即可</em></p></blockquote><h2 id="vue-router的使用"><a href="#vue-router的使用" class="headerlink" title="vue-router的使用"></a>vue-router的使用</h2><p><a href="https://router.vuejs.org/zh/guide/">官方文档</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用npm</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@4</span><br></pre></td></tr></tbody></table></figure><p>使用yarn</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add vue-router@4</span><br></pre></td></tr></tbody></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>==1.在src下新建    router/index.ts==</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { createRouter, createWebHashHistory, <span class="title class_">RouteRecordRaw</span> } <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; = [</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">path</span>: <span class="string">'/'</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">'组件名'</span>,</span><br><span class="line">        <span class="attr">redirect</span>: <span class="string">'/'</span> ,<span class="comment">//重定向</span></span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">'组件路径'</span>),</span><br><span class="line">        <span class="attr">children</span>:[{<span class="attr">path</span>:<span class="string">''</span>,<span class="attr">name</span>:<span class="string">''</span>,<span class="attr">components</span>:{}}]<span class="comment">//有子组件时</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">       <span class="attr">path</span>: <span class="string">'/'</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">'组件名'</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">'组件路径'</span>),</span><br><span class="line">    },</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>({</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    routes</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>==2.在main.ts中挂载使用== </p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">'#app'</span>)</span><br></pre></td></tr></tbody></table></figure><p>==3.router-link和router-view==</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用to='/路径'来指定链接 --&gt;</span><br><span class="line">&lt;router-link to="/"&gt;Go to sw&lt;/router-link&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- &nbsp;放到想要呈现路由的地方 --&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><h4 id="query传参"><a href="#query传参" class="headerlink" title="query传参"></a>query传参</h4><p>==在需要传参的组件中==</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> {useRouter } <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>();</span><br><span class="line"><span class="comment">// 传递参数,一般为button添加事件触发</span></span><br><span class="line"><span class="keyword">const</span> 事件名 = <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="comment">// 编程式跳转和传参</span></span><br><span class="line">  router.<span class="title function_">push</span>({</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/目标路径'</span>,</span><br><span class="line">    <span class="attr">query</span>: {</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">'这是路由传入的参数'</span></span><br><span class="line">    }</span><br><span class="line">  })</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>==在需要接收参数的组件中==</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { useRoute} <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span><br><span class="line"><span class="keyword">const</span> route=<span class="title function_">useRoute</span>()</span><br><span class="line"><span class="keyword">const</span> 接收变量名=route.<span class="property">query</span>.<span class="property">msg</span></span><br></pre></td></tr></tbody></table></figure><p>或者直接使用</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{route.query.msg}}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>一定要注意 router和route的区别！！</p><p><code>router传参</code>、<code>route接收</code></p></blockquote><h2 id="小菠萝Pinia"><a href="#小菠萝Pinia" class="headerlink" title="小菠萝Pinia"></a>小菠萝Pinia</h2><p><a href="https://pinia.web3doc.top/">小菠萝文档</a></p><h3 id="相比vuex的优势"><a href="#相比vuex的优势" class="headerlink" title="相比vuex的优势"></a>相比vuex的优势</h3><ol><li>Pinia 提供了一个更简单的 API，具有更少的规范</li><li>vue3</li><li>可以更好的兼容TypeScript </li></ol><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pinia</span><br></pre></td></tr></tbody></table></figure><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>==1.在main.ts挂载==</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { createPinia } <span class="keyword">from</span> <span class="string">'pinia'</span></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br></pre></td></tr></tbody></table></figure><p>==2.在src中创建容器文件夹store及index.ts==</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { defineStore } <span class="keyword">from</span> <span class="string">'pinia'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> 函数名 = <span class="title function_">defineStore</span>(<span class="string">'唯一id'</span>, {</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">           <span class="comment">//类似data</span></span><br><span class="line">           <span class="comment">// 属性名1：值,</span></span><br><span class="line">           <span class="comment">// 属性名2：值,</span></span><br><span class="line">           <span class="comment">// 属性名3：值,</span></span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">getters</span>: {</span><br><span class="line">        <span class="comment">//类似computed</span></span><br><span class="line">        <span class="comment">//方法名(state){</span></span><br><span class="line">         <span class="comment">//   return </span></span><br><span class="line">         <span class="comment">//   state.属性·······</span></span><br><span class="line">        <span class="comment">//}</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">actions</span>: {</span><br><span class="line">        <span class="comment">//类似methods</span></span><br><span class="line">        <span class="comment">//函数名(state: any) {</span></span><br><span class="line">         <span class="comment">//   state.属性 =······</span></span><br><span class="line">        <span class="comment">//}</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>==3.在需要使用的组件中==</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> {函数名} <span class="keyword">from</span> <span class="string">'./store.index.ts'</span></span><br><span class="line"><span class="keyword">const</span> mypinia=函数名()<span class="comment">//调用函数以实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//直接使用 例如</span></span><br><span class="line">mypinia.属性名  </span><br><span class="line">mypinia.方法名</span><br></pre></td></tr></tbody></table></figure><h3 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h3><ol><li><p>在使用的组件中更新   <code>$patch</code></p><blockquote><p>用 $patch 实现批量更新</p></blockquote><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">function</span>=(<span class="params"></span>)=&gt;{</span><br><span class="line">mypinia.$patch(<span class="function"><span class="params">state</span>=&gt;</span>{</span><br><span class="line">        state.属性<span class="number">1</span>++</span><br><span class="line">        state.属性<span class="number">2</span>=·····</span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>逻辑过多时可以封装到actions中</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在store/index.ts中</span></span><br><span class="line"><span class="attr">actions</span>:{</span><br><span class="line">    函数名(){</span><br><span class="line">        <span class="variable language_">this</span>.属性<span class="number">1</span>++</span><br><span class="line">        <span class="variable language_">this</span>.属性<span class="number">2</span>·····</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//同样可以使用$patch实现批量更新</span></span><br><span class="line"><span class="attr">actions</span>:{</span><br><span class="line">    函数名(){</span><br><span class="line">        <span class="variable language_">this</span>.$patch(<span class="function"><span class="params">state</span>=&gt;</span>{</span><br><span class="line">            state.属性<span class="number">1</span>++</span><br><span class="line">        state.属性<span class="number">2</span>=·····</span><br><span class="line">        })</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>使用时调用： <code>mypinia.函数名( )</code></p></blockquote></li></ol><h2 id="Element"><a href="#Element" class="headerlink" title="Element+"></a>Element+</h2><p><a href="https://element-plus.gitee.io/zh-CN/">官方文档</a></p><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-plus --save</span><br></pre></td></tr></tbody></table></figure><h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">'element-plus'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-plus/dist/index.css'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">ElementPlusIconsVue</span> <span class="keyword">from</span> <span class="string">'@element-plus/icons-vue'</span></span><br><span class="line"><span class="comment">// 注册所有图标</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, component] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(<span class="title class_">ElementPlusIconsVue</span>)) {</span><br><span class="line">    app.<span class="title function_">component</span>(key, component)</span><br><span class="line">}</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p><a href="http://www.axios-js.com/zh-cn/docs/">官方文档</a></p><h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></tbody></table></figure><h3 id="简易封装"><a href="#简易封装" class="headerlink" title="简易封装"></a>简易封装</h3><p>创建http文件夹，并新建index.ts</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="comment">//创建axios实例</span></span><br><span class="line"><span class="keyword">const</span> $http = axios.<span class="title function_">create</span>({</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">$http.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) {</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">}, <span class="keyword">function</span> (<span class="params">error</span>) {</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">$http.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) {</span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">    <span class="comment">//列如  return response.data 可以直接返回.data的值</span></span><br><span class="line">}, <span class="keyword">function</span> (<span class="params">error</span>) {</span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> $http</span><br></pre></td></tr></tbody></table></figure><p>在新建一个文件夹apis，将所有用到的api封装于此</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $http <span class="keyword">from</span> <span class="string">"../http/index"</span>;</span><br><span class="line"><span class="comment">// 获得本地json</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getBanner</span> = (<span class="params"></span>) =&gt; $http.<span class="title function_">get</span>(<span class="string">'/json/banner.json'</span>,{ <span class="attr">params</span>: { <span class="attr">way</span>:<span class="string">'这样传参'</span> } })</span><br><span class="line"><span class="comment">// 获得开源接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">GetSaying</span> = (<span class="params">id: <span class="built_in">number</span></span>) =&gt; $http.<span class="title function_">get</span>(<span class="string">`https://paul.ren/api/say?id=<span class="subst">${id}</span>`</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="使用class封装"><a href="#使用class封装" class="headerlink" title="使用class封装"></a>使用class封装</h3><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios, { <span class="title class_">AxiosRequestConfig</span>,<span class="title class_">AxiosResponse</span> } <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">const</span> defaultConfig = {</span><br><span class="line">    <span class="attr">baseUrl</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">1500</span>,</span><br><span class="line">}</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Http</span> {</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title class_">HttpInterceptorsRequest</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title class_">HttpInterceptorsResponse</span>()</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> axiosInstance = axios.<span class="title function_">create</span>(defaultConfig)</span><br><span class="line">    <span class="comment">// 请求拦截</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title class_">HttpInterceptorsRequest</span>() {</span><br><span class="line">        <span class="title class_">Http</span>.<span class="property">axiosInstance</span>.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">config: AxiosRequestConfig</span>) =&gt;</span> {</span><br><span class="line">            <span class="keyword">return</span> config</span><br><span class="line">        }, <span class="function"><span class="params">err</span> =&gt;</span> {</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">        })</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//响应拦截</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title class_">HttpInterceptorsResponse</span>() {</span><br><span class="line">        <span class="title class_">Http</span>.<span class="property">axiosInstance</span>.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">config: AxiosResponse</span>) =&gt;</span> {</span><br><span class="line">            <span class="keyword">return</span> config</span><br><span class="line">        }, <span class="function"><span class="params">err</span> =&gt;</span> {</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">        })</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装请求</span></span><br><span class="line">    <span class="comment">//get</span></span><br><span class="line">    <span class="keyword">public</span> httpGet&lt;T&gt;(<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">params</span>: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">Promise</span>&lt;T&gt; {</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Http</span>.<span class="property">axiosInstance</span>.<span class="title function_">get</span>(url, params).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="property">data</span>).<span class="title function_">catch</span>()</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//post</span></span><br><span class="line">    <span class="keyword">public</span> httpPost&lt;T&gt;(<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">params</span>: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">Promise</span>&lt;T&gt; {</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Http</span>.<span class="property">axiosInstance</span>.<span class="title function_">post</span>(url, params).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="property">data</span>).<span class="title function_">catch</span>()</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> http = <span class="keyword">new</span> <span class="title class_">Http</span>() </span><br></pre></td></tr></tbody></table></figure><h3 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h3><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { <span class="title class_">GetSaying</span> } <span class="keyword">from</span> <span class="string">"../http/apis"</span>;</span><br><span class="line"><span class="keyword">const</span> saying = <span class="title function_">ref</span>();</span><br><span class="line"><span class="title function_">onMounted</span>(<span class="keyword">async</span> () =&gt; {</span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">GetSaying</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">     saying= res.<span class="property">data</span>;</span><br><span class="line">  });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h2 id="使用eslint"><a href="#使用eslint" class="headerlink" title="使用eslint"></a>使用eslint</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint -D</span><br><span class="line">npx eslint --init </span><br></pre></td></tr></tbody></table></figure><p>按需选择配置并安装即可</p><p>使用Sass</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i sass -D</span><br></pre></td></tr></tbody></table></figure><p>安装完成后，还需要在vite.config.ts中添加配置</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>({</span><br><span class="line">  <span class="attr">css</span>: {</span><br><span class="line">    <span class="attr">preprocessorOptions</span>: {</span><br><span class="line">      <span class="attr">scss</span>: {</span><br><span class="line">        <span class="attr">additionalData</span>: <span class="string">``</span></span><br><span class="line">      },</span><br><span class="line">      <span class="attr">styl</span>: {</span><br><span class="line">        <span class="attr">additionalData</span>: <span class="string">``</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>在src/assets下新建scss文件</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在配置中填入新建scss文件路径</span></span><br><span class="line"><span class="attr">scss</span>: {</span><br><span class="line">        <span class="attr">additionalData</span>: <span class="string">`@import "src/assets/scss/variable.scss";`</span></span><br><span class="line">      },</span><br></pre></td></tr></tbody></table></figure><p>在需要使用的页面设置</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped lang=<span class="string">'scss'</span>&gt;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'../../assets/scss/home/index.scss'</span>;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 操作指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 发布文章的方法</title>
      <link href="/post/7a776471.html"/>
      <url>/post/7a776471.html</url>
      
        <content type="html"><![CDATA[<p>hexo 发布文章的方法</p><ol><li><p>命令行窗口<code>hexo new 文章名字</code></p></li><li><p>到<code>myblog\source\_posts</code>里编写</p></li><li><p>依次执行==hexo clean== &amp;&amp;==hexo g== &amp;&amp; ==hexo d==</p><p>为文章添加信息</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标题【必须】</span><br><span class="line">date: 日期【会自动生成】</span><br><span class="line">updated: 更新日期</span><br><span class="line">tags: 文章标签</span><br><span class="line">categories: 分类</span><br><span class="line">keywords: 关键字</span><br><span class="line">description: 描述</span><br><span class="line">top_img: 顶部图片</span><br><span class="line">comments:</span><br><span class="line">cover: 文章缩略图</span><br><span class="line">toc:</span><br><span class="line">toc_number:</span><br><span class="line">toc_style_simple:</span><br><span class="line">copyright:</span><br><span class="line">copyright_author: 文章作者</span><br><span class="line">copyright_author_href:</span><br><span class="line">copyright_url:</span><br><span class="line">copyright_info:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aplayer:</span><br><span class="line">highlight_shrink:</span><br><span class="line">aside: 侧边显示栏（默认为true）</span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure></li></ol><blockquote><p>注意冒号之后有空格</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 操作指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vercel </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于我</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h3 id="我的简历"><a href="#我的简历" class="headerlink" title="我的简历"></a>我的简历</h3><p><a href="https://r.easycv.cn/PX52hZ">https://r.easycv.cn/PX52hZ</a></p><p>巴拉巴拉~~~</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>archives</title>
      <link href="/archives/index.html"/>
      <url>/archives/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/scaffolds/draft.html"/>
      <url>/scaffolds/draft.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://cdn.cbd.int/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://cdn.cbd.int/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;}div#menus {    font-family: 'ZhuZiAYuanJWD';}h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;}a.article-title,a.blog-slider__title,a.categoryBar-list-link,h1.post-title {    font-family: ZhuZiAYuanJWD;}.iconfont {    font-family: 'iconfont' !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;}/* 时间轴生肖icon */svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;}.icon-zhongbiao::before {    color: #f7c768;}/* bilibli番剧插件 */.bangumi-active {    background: #dbecfe !important;    border-radius: 10px !important;}a.bangumi-tab:hover {    text-decoration: none !important;}.bangumi-button:hover {    background: #dbecfe !important;    border-radius: 10px !important;}a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;}.bangumi-button {    padding: 5px 10px !important;}a.bangumi-tab {    padding: 5px 10px !important;}svg.icon.faa-tada {    font-size: 1.1em;}/* 解决artitalk的图标问题 */#uploadSource&gt;svg {    width: 1.19em;    height: 1.5em;}/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */#page-header:not(.not-top-img):before {    background-color: transparent !important;}/* 首页文章卡片 */#recent-posts&gt;.recent-post-item {    background: rgba(255, 255, 255, 0.9);}/* 首页侧栏卡片 */#aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);}/* 文章页面正文背景 */div#post {    background: rgba(255, 255, 255, 0.9);}/* 分页页面 */div#page {    background: rgba(255, 255, 255, 0.9);}/* 归档页面 */div#archive {    background: rgba(255, 255, 255, 0.9);}/* 标签页面 */div#tag {    background: rgba(255, 255, 255, 0.9);}/* 分类页面 */div#category {    background: rgba(255, 255, 255, 0.9);}/*夜间模式伪类遮罩层透明*/[data-theme='dark'] #recent-posts&gt;.recent-post-item {    background: #121212;}[data-theme='dark'] .card-widget {    background: #121212 !important;}[data-theme='dark'] div#post {    background: #121212 !important;}[data-theme='dark'] div#tag {    background: #121212 !important;}[data-theme='dark'] div#archive {    background: #121212 !important;}[data-theme='dark'] div#page {    background: #121212 !important;}[data-theme='dark'] div#category {    background: #121212 !important;}[data-theme='dark'] div#category {    background: transparent !important;}/* 页脚透明 */#footer {    background: transparent !important;}/* 头图透明 */#page-header {    background: transparent !important;}#rightside&gt;div&gt;button {    border-radius: 5px;}/* 滚动条 */::-webkit-scrollbar {    width: 10px;    height: 10px;}::-webkit-scrollbar-thumb {    background-color: #49b1f5;    border-radius: 2em;}::-webkit-scrollbar-corner {    background-color: transparent;}::-moz-selection {    color: #fff;    background-color: #49b1f5;}/* 音乐播放器 *//* .aplayer .aplayer-lrc {  display: none !important;} */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}.aplayer.aplayer-fixed {    z-index: 999999 !important;}/* 评论框  */.vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;}/* 设置评论框 */.vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;}/* 鼠标图标 */body {    cursor: url('/img/x1.cur'), auto;}a,[type='button']:not(:disabled),[type='reset']:not(:disabled),[type='submit']:not(:disabled),button:not(:disabled) {    cursor: url('/img/x2.cur'), auto !important;}/* md网站下划线 */#article-container a:hover {    text-decoration: none !important;}#article-container #hpp_talk p img {    display: inline;}/* 404页面 */#error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);}#error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;}#error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #49b1f5;    background-position: center;    background-size: cover;}#error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft JhengHei', 'Microsoft YaHei', sans-serif;}#error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;}#error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;}#error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);}#body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;}#body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;}#body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;}#body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;}#body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--heo-card-bg);    display: flex;}#body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;}#body-wrap.error .aside-list .aside-list-item .content time {    display: none;}/* 代码框主题 */#article-container figure.highlight {    border-radius: 10px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/scaffolds/page.html"/>
      <url>/scaffolds/page.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/scaffolds/post.html"/>
      <url>/scaffolds/post.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
