<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>微信小程序</title>
      <link href="/post/4618cb0a.html"/>
      <url>/post/4618cb0a.html</url>
      
        <content type="html"><![CDATA[<h2 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h2><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><h5 id="与网页开发的区别"><a href="#与网页开发的区别" class="headerlink" title="与网页开发的区别"></a>与网页开发的区别</h5><ol><li>运行环境不同</li></ol><p>​        网页运行在浏览器环境，小程序运行在微信环境</p><ol start="2"><li>api不同</li></ol><p>​        微信小程序无法获取bom dom的api，但可以调用微信的提供的扫码、支付等api</p><ol start="3"><li><p>开发模式不同</p><p>网页：浏览器+代码编辑器</p><p>小程序：申请开发者账号，安装小程序开发者工具，创建项目</p></li></ol><h5 id="注册开发者账号"><a href="#注册开发者账号" class="headerlink" title="注册开发者账号"></a>注册开发者账号</h5><p><a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com/</a></p><p>进入网址，点击注册，选择小程序</p><p>注册账号-邮箱验证-登记个人信息</p><h5 id="获取小程序appid"><a href="#获取小程序appid" class="headerlink" title="获取小程序appid"></a>获取小程序appid</h5><p>登陆<a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com/</a></p><p>开发-开发设置-查看appid  （创建小程序需要用到该id）</p><h5 id="安装开发者工具"><a href="#安装开发者工具" class="headerlink" title="安装开发者工具"></a>安装开发者工具</h5><p><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/devtools.html">https://developers.weixin.qq.com/miniprogram/dev/devtools/devtools.html</a></p><p>点击工具选项卡</p><p>下载最新版本</p><p>扫码登录</p><p><code>默认机型为iphone5</code> 建议修改为 iPhone678并调整显示比例 </p><h5 id="项目基本构成"><a href="#项目基本构成" class="headerlink" title="项目基本构成"></a>项目基本构成</h5><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-09-16_16-11-27.png" alt="Snipaste_2022-09-16_16-11-27"></p><h5 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h5><p>在app.json 的pages中，新增路径，会自动创建对应的页面文件</p><p>调整app.json 的pages的顺序可以修改项目的首页，默认把排第一的渲染为首页<img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-09-16_16-46-51.png" alt="Snipaste_2022-09-16_16-46-51"></p><h4 id="常用控件"><a href="#常用控件" class="headerlink" title="常用控件"></a>常用控件</h4><h5 id="view组件的基本使用"><a href="#view组件的基本使用" class="headerlink" title="view组件的基本使用"></a>view组件的基本使用</h5><blockquote><p>container 是微信开发程序的语义词 ，去类名要避免使用</p></blockquote><p>=网页布局的div</p><p>scroll-view 是可以滚动的view，scroll-x和scroll-y定义横向和纵向滚动</p><p><code>使用时需要给scroll-view添加高度或宽度</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">scroll-x</span> <span class="attr">scrool-y</span>&gt;</span><span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="swiper和swiper-item轮播组件"><a href="#swiper和swiper-item轮播组件" class="headerlink" title="swiper和swiper-item轮播组件"></a>swiper和swiper-item轮播组件</h5><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">swiper</span> <span class="attr">indicator-active-color</span>=<span class="string">"red"</span> <span class="attr">indicator-dots</span> <span class="attr">indicator-color</span>=<span class="string">"blue"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span>1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-09-16_17-17-29.png" alt="Snipaste_2022-09-16_17-17-29"></p><h5 id="常用文本组件"><a href="#常用文本组件" class="headerlink" title="常用文本组件"></a>常用文本组件</h5><p>text</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">长按选中文本效果 </span><br><span class="line">selectabel、user-select都可以实现</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">selectabel</span>&gt;</span>长安即可选中<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>富文本 rich-text</p><p>类似v-html，可以解析html标签</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rich-text</span> <span class="attr">nodes</span>=<span class="string">"&lt;h1 style='color:red'&gt; 我能被解析 &lt;/h1&gt;&gt;&lt;/rich-text&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><p>bottom组件</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bottom</span> <span class="attr">mini</span> <span class="attr">type</span>=<span class="string">'default/warn/primary'</span> <span class="attr">plain</span> &gt;</span>11<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">size='mini' 为小尺寸按钮  plain 为镂空按钮</span><br></pre></td></tr></tbody></table></figure><p>image组件</p><p>默认有宽度</p><p>mode属性可以指定图片裁剪和缩放<img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-09-16_17-17-29.png" alt="Snipaste_2022-09-16_17-17-29"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">''</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="小程序的api"><a href="#小程序的api" class="headerlink" title="小程序的api"></a>小程序的api</h2><p>官方把api分为了事件监听api 、同步api、异步api<img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-09-16_17-17-29.png" alt="Snipaste_2022-09-16_17-17-29"></p><h3 id="WXML模板语法"><a href="#WXML模板语法" class="headerlink" title="WXML模板语法"></a>WXML模板语法</h3><h4 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h4><p>类似vue3，在页面对应的js文件的data中定义即可</p><p>插值语法：</p><p>不同：</p><p>vue绑定数据使用v-bind</p><p>小程序直接使用插值语法</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vue3 </span><br><span class="line">:src='date'</span><br><span class="line">小程序</span><br><span class="line">src='{{ date }}'</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><p>常用事件</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919152134926.png" alt="image-20220919152134926"></p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919152359300.png" alt="image-20220919152359300"></p><h5 id="bindtap语法格式"><a href="#bindtap语法格式" class="headerlink" title="bindtap语法格式"></a>bindtap语法格式</h5><ol><li>声明组件</li><li>在组件上绑定bindtap函数</li><li>去js文件page中定义函数，可以接受一个事件参数对象(e)</li></ol><h5 id="this-setData"><a href="#this-setData" class="headerlink" title="this.setData({  })"></a>this.setData({  })</h5><p>给data中的数据赋新值</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919153226236.png" alt="image-20220919153226236"></p><h5 id="小程序事件传参"><a href="#小程序事件传参" class="headerlink" title="小程序事件传参"></a>小程序事件传参</h5><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919153347076.png" alt="image-20220919153347076"></p><p>无法在定义函数的括号内传参</p><p>传过去的参数为 <code>info：2</code></p><p>在函数内使用<code>event.target.dataset</code>.参数名可以拿到传过来的参数·</p><h5 id="bindinput"><a href="#bindinput" class="headerlink" title="bindinput"></a>bindinput</h5><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919154353697.png" alt="image-20220919154353697"></p><h4 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h4><h5 id="wx：if"><a href="#wx：if" class="headerlink" title="wx：if"></a>wx：if</h5><p>类似v-if</p><p>搭配 <code>wx：elif </code> <code>wx：else</code> 使用</p><p>搭配<block></block>使用</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919155121405.png" alt="image-20220919155121405"></p><h5 id="hidden"><a href="#hidden" class="headerlink" title="hidden"></a>hidden</h5><p>hidden也能控制元素的现实和隐藏  <code>hidden='{{}}'</code></p><p> 条件为真则隐藏，假则渲染，默认为真</p><h5 id="wx-if-和hidden的区别"><a href="#wx-if-和hidden的区别" class="headerlink" title="wx:if 和hidden的区别"></a>wx:if 和hidden的区别</h5><p>wx:if是动态移除元素hidden是给元素加样式</p><p>类似v-if和v-show</p><p>频繁切换时使用hidden，减少性能消耗</p><h4 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h4><h5 id="wx-for"><a href="#wx-for" class="headerlink" title="wx:for"></a>wx:for</h5><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919160038396.png" alt="image-20220919160038396"></p><p>使用<code>wx:for-item="" </code> <code> wx:for-index=""</code>可以给index和item自定义名字（插值语法的名字）<code> 没卵用</code></p><p>使用<code>wx:key</code>指定唯一key值,提高渲染效率  <code> wx:key='id'</code></p><h3 id="wxss模板样式"><a href="#wxss模板样式" class="headerlink" title="wxss模板样式"></a>wxss模板样式</h3><p>具有css的大部分特性，同时还对css进行了扩充和修改</p><ol><li>rpx尺寸单位</li><li>@import样式引入</li></ol><p>rpx 是微信小程序独有，解决屏幕适配问题</p><p>样式导入 <code>@import "相对路径";</code></p><h4 id="全局和局部"><a href="#全局和局部" class="headerlink" title="全局和局部"></a>全局和局部</h4><p>app.wxss里的样式都是全局样式，可以作用于所有页面</p><p>全局样式和局部样式冲突时，优先局部样式，只有全局样式权重大于局部时才会覆盖</p><h4 id="全局配置文件"><a href="#全局配置文件" class="headerlink" title="全局配置文件"></a>全局配置文件</h4><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919162729931.png" alt="image-20220919162729931"></p><h5 id="window配置"><a href="#window配置" class="headerlink" title="window配置"></a>window配置</h5><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919163011555.png" alt="image-20220919163011555"></p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919163202232.png" alt="image-20220919163202232"></p><h4 id="tabBar"><a href="#tabBar" class="headerlink" title="tabBar"></a>tabBar</h4><p>用于多页面切换的功能</p><ul><li>tabBar最少两个最多五个</li><li>渲染顶部tabBar时，不显示ico，只显示文本<img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919164729822.png" alt="image-20220919164729822"></li></ul><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919164749926.png" alt="image-20220919164749926"></p><p>list必填，其中的每一项又有如下配置</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919164908214.png" alt="image-20220919164908214"></p><p><code>tabBar的页面需要在page中放在最前面</code><br>tabBar配置样例 </p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919165242709.png" alt="image-20220919165242709"></p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919165436793.png" alt="image-20220919165436793"></p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919165703652.png" alt="image-20220919165703652"></p><h3 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h3><p>只能请求https类型的接口</p><p>必须将接口添加到信任列表中</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919170516518.png" alt="image-20220919170516518"></p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919170708204.png" alt="image-20220919170708204"></p><h4 id="发起GET请求"><a href="#发起GET请求" class="headerlink" title="发起GET请求"></a>发起GET请求</h4><p>调用wx.request()</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919171428037.png" alt="image-20220919171428037"></p><p>发起post请求与get类似，将method改成post即可 </p><h4 id="跳过request合法域名检验"><a href="#跳过request合法域名检验" class="headerlink" title="跳过request合法域名检验"></a>跳过request合法域名检验<img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220919172213521.png" alt="image-20220919172213521"></h4><p>仅在开发、调试阶段使用</p><h5 id="小程序不存在跨域问题"><a href="#小程序不存在跨域问题" class="headerlink" title="小程序不存在跨域问题"></a>小程序不存在跨域问题</h5><p>ajax技术核心是依赖于浏览器的XMLHttpRequest，小程序打的宿主环境是微信，不存在ajax请求</p><h3 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h3><h5 id="应用的生命周期"><a href="#应用的生命周期" class="headerlink" title="应用的生命周期"></a>应用的生命周期</h5><h5 id=""><a href="#" class="headerlink" title=""></a><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220920135102753.png" alt="image-20220920135102753"></h5><h5 id="页面的生命周期"><a href="#页面的生命周期" class="headerlink" title="页面的生命周期"></a>页面的生命周期</h5><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220920135510005.png" alt="image-20220920135510005"></p><h3 id="页面导航"><a href="#页面导航" class="headerlink" title="页面导航"></a>页面导航</h3><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220920130106184.png" alt="image-20220920130106184"></p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220920130424119.png" alt="image-20220920130424119"></p><p>导航到非tabBar时，open-type=“navigate” (默认就是这个，可以省略<img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220920130759443.png" alt="image-20220920130759443">)</p><h4 id="导航传参"><a href="#导航传参" class="headerlink" title="导航传参"></a>导航传参</h4><p>声明式传参<img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220920131143608.png" alt="image-20220920131143608"></p><p>编程式传参</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220920131319897.png" alt="image-20220920131319897"></p><p>onLoad中接收参数</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220920131553006.png" alt="image-20220920131553006"></p><p>一般会选择在data新建一个数组用于接收参数，在onLoad里面使用setData函数赋值给新数组</p><h3 id="页面事件"><a href="#页面事件" class="headerlink" title="页面事件"></a>页面事件</h3><h4 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h4><p>json文件的<code>enablePullDownRefresh：true</code> (分为局部和全局)</p><p>backgroundColor</p><p>backgroundTextStyle</p><h5 id="监听下拉刷新事件"><a href="#监听下拉刷新事件" class="headerlink" title="监听下拉刷新事件"></a>监听下拉刷新事件</h5><p> js文件onPullDownRefresh</p><h5 id="停止下拉刷新"><a href="#停止下拉刷新" class="headerlink" title="停止下拉刷新"></a>停止下拉刷新</h5><p>调用 <code>wx.stopPullDownRefresh( )</code></p><h4 id="上拉触底事件"><a href="#上拉触底事件" class="headerlink" title="上拉触底事件"></a>上拉触底事件</h4><p>类似实现分页功能，上拉加载更多数据</p><h5 id="监听上拉事件"><a href="#监听上拉事件" class="headerlink" title="监听上拉事件"></a>监听上拉事件</h5><p>js文件中onReachBottom( ){ }  （默认生成）</p><p>对上拉触底进行节流处理</p><p> <img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220920134338300.png" alt="image-20220920134338300"></p><h4 id="添加loading效果"><a href="#添加loading效果" class="headerlink" title="添加loading效果"></a>添加loading效果</h4><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220920133949479.png" alt="image-20220920133949479"></p><h4 id="wxs脚本"><a href="#wxs脚本" class="headerlink" title="wxs脚本"></a>wxs脚本</h4><p>微信wxs代码可以编写在<wxs>标签内<br><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220920140147743.png" alt="image-20220920140147743"></wxs></p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220920140329558.png" alt="image-20220920140329558"></p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220920140519998.png" alt="image-20220920140519998"></p><p>wxs应用场景就是过滤器,搭配插值语法使用,不能作为组件的事件回调函数</p><p>wxs不能调用js定义的函数， 不能使用微信提供的api</p><h2 id="基础加强"><a href="#基础加强" class="headerlink" title="基础加强"></a>基础加强</h2><h2 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h2><h4 id="组件创建"><a href="#组件创建" class="headerlink" title="组件创建"></a>组件创建</h4><p>根目录中，创建components文件夹</p><p>新建test1文件夹，一个文件夹存放一个组件，这样做结构明了</p><p>在test文件夹上右键选择新建component，输入名称后即可生成对应文件</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220922110836739.png" alt="image-20220922110836739"></p><h4 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h4><h5 id="局部引用"><a href="#局部引用" class="headerlink" title="局部引用"></a>局部引用</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//在页面的.json文件中</span><br><span class="line">{</span><br><span class="line">  "usingCoponents":{</span><br><span class="line">"组件名字":"/组件路径"</span><br><span class="line">   }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">//在页面中</span><br><span class="line">&lt;组件名字&gt;&lt;/组件名字&gt;</span><br></pre></td></tr></tbody></table></figure><h5 id="全局引用"><a href="#全局引用" class="headerlink" title="全局引用"></a>全局引用</h5><p>在app.json中使用usingComponents，即可在页面直接使用</p><h4 id="组件和页面的区别"><a href="#组件和页面的区别" class="headerlink" title="组件和页面的区别"></a>组件和页面的区别</h4><p>组件的.json文件中需要声明<code>"component"：true</code>属性</p><p>组件的.js文件调用的是<code>"Component()"</code>函数，页面调用的是<code>Page()</code></p><p>组件的处理函数需要写到<code>methods</code>节点中</p><h3 id="组件的样式"><a href="#组件的样式" class="headerlink" title="组件的样式"></a>组件的样式</h3><p>组件的样式具有样式隔离</p><p>不会影响到其他组件的样式和小程序的样式</p><h5 id="ps"><a href="#ps" class="headerlink" title="ps:"></a>ps:</h5><p><code>app.wxss</code>的全局样式对组件无效</p><p>只有<code>class</code>选择器样式隔离效果，id选择器、属性选择器、标签选择器不受影响</p><p>在组件和引用组件的页面使用class选择器，不要使用<code>id选择器、属性选择器、标签选择器</code></p><h3 id="自定义组件的数据、方法、属性"><a href="#自定义组件的数据、方法、属性" class="headerlink" title="自定义组件的数据、方法、属性"></a>自定义组件的数据、方法、属性</h3><h4 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h4><p>组件私有数据定义到<code>data{}</code>中</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>事件处理函数和自定义方法需要定义到<code>methods:{ }</code>节点</p><p>自定义方法命名时可以以下划线_开头，与事件处理函数作区分</p><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><h5 id="properties-（一般用于存储外界传过来的数据）"><a href="#properties-（一般用于存储外界传过来的数据）" class="headerlink" title="properties （一般用于存储外界传过来的数据）"></a>properties （一般用于存储外界传过来的数据）</h5><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220922114324652.png" alt="image-20220922114324652"></p><p><code>properties和data在本质上没有任何区别,可使用的方法也一样</code></p><h3 id="数据监听器"><a href="#数据监听器" class="headerlink" title="数据监听器"></a>数据监听器</h3><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220922115008798.png" alt="image-20220922115008798"></p><p>属性很多时，可以使用<code>obj.**</code>来监听对象中的所有属性</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220922120341836.png" alt="image-20220922120341836"></p><h3 id="纯数据字段"><a href="#纯数据字段" class="headerlink" title="纯数据字段"></a>纯数据字段</h3><p>不会展示在页面上，也不会传递给其他组件的data字段</p><p>优点：提高页面的更新性能</p><h4 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h4><p>options：{</p><p>​    pureDataPattern：正则</p><p>}</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220922120725840.png" alt="image-20220922120725840"></p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><h4 id="小程序的生命周期"><a href="#小程序的生命周期" class="headerlink" title="小程序的生命周期"></a>小程序的生命周期</h4><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220922121332388.png" alt="image-20220922121332388"></p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220922121624152.png" alt="image-20220922121624152"></p><h5 id="小程序生命周期函数的定义"><a href="#小程序生命周期函数的定义" class="headerlink" title="小程序生命周期函数的定义"></a>小程序生命周期函数的定义</h5><p>推荐使用lifetimes节点定义</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220922121709646.png" alt="image-20220922121709646"></p><h4 id="组件所在页面中的生命周期"><a href="#组件所在页面中的生命周期" class="headerlink" title="组件所在页面中的生命周期"></a>组件所在页面中的生命周期</h4><p><code>show()、hide()、 resize()</code></p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220922121924283.png" alt="image-20220922121924283"></p><h5 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h5><p>pageLifetimes:{ }</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220922122036438.png" alt="image-20220922122036438"></p><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><p>在wxml结构中，提供一个<slot>,用于承载内容</slot></p><p>启用多个插槽</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220922123521182.png" alt="image-20220922123521182"></p><p>使用多个插槽时需要指定名字</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//在组件</span><br><span class="line">&lt;slot name="chachao"&gt;&lt;/slot&gt;</span><br><span class="line"></span><br><span class="line">//在页面</span><br><span class="line">&lt;view slot='chachao'&gt;&lt;/view&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><h4 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h4><h4 id="事件绑定-1"><a href="#事件绑定-1" class="headerlink" title="事件绑定"></a>事件绑定</h4><p>步骤</p><ol><li>在父组件js中，定义一个函数</li><li>在父组件wxml中，通过自定义事件 <code>bind:自定义事件名="函数" </code>传递给子组件</li><li>子组件js中，通过<code>this.triggerEvent('自定义事件名',{参数数组})</code>，将参数传给父组件</li><li>父组件的js中，通过调用函数<code>function(e) {e.detail}</code> 获取子组件传过来的数据 </li></ol><h4 id="获取组件实例"><a href="#获取组件实例" class="headerlink" title="获取组件实例"></a>获取组件实例</h4><p><code>this.selectComponent(.名字 或 #名字)</code></p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220922190733849.png" alt="image-20220922190733849"></p><h2 id="behaviors-类似mixins"><a href="#behaviors-类似mixins" class="headerlink" title="behaviors (类似mixins)"></a>behaviors (类似mixins)</h2>]]></content>
      
      
      <categories>
          
          <category> 操作指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鸡鸡静听2.0 项目设计</title>
      <link href="/post/3ccadc1b.html"/>
      <url>/post/3ccadc1b.html</url>
      
        <content type="html"><![CDATA[<h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><h3 id="使用工具："><a href="#使用工具：" class="headerlink" title="使用工具："></a>使用工具：</h3><p><strong><code>typeScript+vue3+setup语法糖+vite</code></strong></p><h3 id="大概："><a href="#大概：" class="headerlink" title="大概："></a>大概：</h3><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-26_17-07-32.png"></p><h3 id="主要实现的功能："><a href="#主要实现的功能：" class="headerlink" title="主要实现的功能："></a>主要实现的功能：</h3><ol><li>音乐查找及播放</li><li>轮播图</li><li>新歌速递</li><li>推荐专辑</li><li>L显示热评</li></ol><h2 id="项目板块划分"><a href="#项目板块划分" class="headerlink" title="项目板块划分"></a>项目板块划分</h2><p><code>头部 header</code>      <code>中间（核心）=左边+右边</code>     <code>底部footer</code></p><ul><li><p> <code>发现音乐      FoundMusic</code></p></li><li><p>轮播图    LunBoTu</p></li><li><p>新歌速递     NewSongs</p></li><li><p>推荐歌单     RecommendPlaylist</p></li><li><p><code>搜索详情      Search</code> </p></li><li><p><code>音乐详情页   MusicDetail</code> </p></li></ul><h2 id="开始实操"><a href="#开始实操" class="headerlink" title="开始实操"></a>开始实操</h2><h3 id="1-1项目初始化"><a href="#1-1项目初始化" class="headerlink" title="1.1项目初始化"></a>1.1项目初始化</h3><p>axios<code>文件夹http</code>、pinia<code>文件夹store</code>、vue-router<code>文件夹router</code>、主要页面<code>文件夹vies</code>、element-plus、less</p><h3 id="1-2项目布局"><a href="#1-2项目布局" class="headerlink" title="1.2项目布局"></a>1.2项目布局</h3><ol><li>app中放置组件==<index>== 存放播放器</index></li><li><index>之中存放==<header>====<main>====<footer>==</footer></main></header></index></li><li>Main&gt;之中存放==<left>====<right>==</right></left></li></ol><h3 id="2-1-使用VERCEL部署网易云音乐api"><a href="#2-1-使用VERCEL部署网易云音乐api" class="headerlink" title="2.1 使用VERCEL部署网易云音乐api"></a>2.1 使用VERCEL部署网易云音乐api</h3><p><img src="C:\Users\22371\AppData\Roaming\Typora\typora-user-images\image-20220526194248771.png" alt="image-20220526194248771"></p><ol><li>先使用github账号登陆vercel   <a href="https://vercel.com/">链接</a></li><li>打开网易云api项目，点右上角fork <a href="https://github.com/2ws-w/">链接</a></li></ol><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220526194349513.png" alt="image-20220526194349513"></p><ol start="3"><li>在vercel新建项目</li></ol><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220526194413384.png"></p><ol start="3"><li>选择网易云api</li></ol><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220526194434359.png" alt="image-20220526194434359"></p><ol start="3"><li>名字自取，其他可以不改变，点击deploy</li></ol><ol start="3"><li><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220526194456591.png" alt="image-20220526194456591"></li></ol><p>6.完成</p><p><img src="C:\Users\22371\AppData\Roaming\Typora\typora-user-images\image-20220526194510636.png" alt="image-20220526194510636"></p><ol start="7"><li><a href="https://netease-cloud-music-api-pearl-five.vercel.app/">项目链接</a></li></ol><h3 id="3-1-搜索板块"><a href="#3-1-搜索板块" class="headerlink" title="3.1 搜索板块"></a>3.1 搜索板块</h3><ol><li>先调用网易云 api</li><li>检查输入框是否有内容，添加回车事件获取关键词<code>keyword</code></li><li>为列表添加点击事件，跳转到音乐详情页，并传入id参数</li></ol><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> keyword = <span class="title function_">ref</span>(<span class="string">' '</span>);</span><br><span class="line"><span class="keyword">let</span> keylist = <span class="title function_">reactive</span>(&lt;<span class="built_in">any</span>&gt;[]);</span><br><span class="line"><span class="keyword">const</span> id = <span class="title function_">ref</span>(<span class="string">'11'</span>);</span><br><span class="line"><span class="title function_">onMounted</span>(<span class="keyword">async</span> () =&gt; {</span><br><span class="line">    <span class="comment">// 传入keyword给 api,并用keylist存贮 获取列表</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">onSearch</span> = <span class="keyword">async</span> (<span class="params">id: <span class="built_in">any</span></span>) =&gt; {</span><br><span class="line">        <span class="keyword">await</span> <span class="title class_">SearchData</span>(keyword.<span class="property">value</span>)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>.<span class="property">result</span>.<span class="property">songs</span>);</span><br><span class="line">                keylist.<span class="title function_">splice</span>(<span class="number">0</span>);</span><br><span class="line">                keylist.<span class="title function_">push</span>(res.<span class="property">data</span>.<span class="property">result</span>.<span class="property">songs</span>);</span><br><span class="line">            })</span><br><span class="line">            .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> {</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">            });</span><br><span class="line">    };</span><br><span class="line">    <span class="comment">//先检查输入框是否有内容，若果有则渲染到页面上</span></span><br><span class="line">    <span class="comment">// 在设置回车事件，根据用户输入值更新页面</span></span><br><span class="line">    <span class="keyword">const</span> myinput = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">".serachInput"</span>) <span class="keyword">as</span> <span class="title class_">HTMLInputElement</span>;</span><br><span class="line">    keyword.<span class="property">value</span> = myinput.<span class="property">value</span></span><br><span class="line">    <span class="title function_">onSearch</span>(keyword.<span class="property">value</span>);</span><br><span class="line">    myinput.<span class="title function_">addEventListener</span>(<span class="string">"keydown"</span>, <span class="keyword">function</span> (<span class="params">e</span>) {</span><br><span class="line">        <span class="keyword">if</span> (e.<span class="property">key</span> == <span class="string">"Enter"</span>) {</span><br><span class="line">            <span class="comment">// 获取输入的值</span></span><br><span class="line">            <span class="comment">// const serachInput = document.querySelector(".serachInput") as HTMLInputElement;</span></span><br><span class="line">            keyword.<span class="property">value</span> = myinput.<span class="property">value</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(id.<span class="property">value</span>);</span><br><span class="line">            <span class="title function_">onSearch</span>(keyword.<span class="property">value</span>);</span><br><span class="line">            router.<span class="title function_">push</span>(<span class="string">'/Search'</span>)</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="3-2-音乐详情页"><a href="#3-2-音乐详情页" class="headerlink" title="3.2 音乐详情页"></a>3.2 音乐详情页</h3><h4 id="更新歌曲详情"><a href="#更新歌曲详情" class="headerlink" title="更新歌曲详情"></a>更新歌曲详情</h4><ol><li>接收传入的id参数</li><li>根据id调用api获取音乐详情</li><li>更新时间、歌词、歌手信息等</li></ol><h4 id="歌词"><a href="#歌词" class="headerlink" title="歌词"></a>歌词</h4><ol><li>使用网易云api获取的歌词是入图的形式，需要手动将时间和歌词分离</li></ol><p><img src="D:\文档\桌面\typora\images\Snipaste_2022-05-27_00-45-04.png"></p><ol start="2"><li><p>调用api获取歌词，并将时间与歌词文字拆离</p><figure class="highlight tex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const getgeci = () =&gt; {</span><br><span class="line">  GetLyric(id).then((res) =&gt; {</span><br><span class="line">    music.lyric = res.data.lrc.lyric</span><br><span class="line">    let obj = {}</span><br><span class="line">    let reg = /<span class="keyword">\[</span>(.*?)](.*)/g;</span><br><span class="line">    //使用正则表达式拆分</span><br><span class="line">    music.lyric.replace(reg, (a, b, c) =&gt; {</span><br><span class="line">      b = b.slice(0, 5)//时间取前4位便于计算</span><br><span class="line">      obj[b] = c;</span><br><span class="line">    })</span><br><span class="line">     // a是原数据，b是时间，c是歌词</span><br><span class="line">    geci2.value = obj;</span><br><span class="line">    console.log("geci2", geci2.value);</span><br><span class="line">  })</span><br></pre></td></tr></tbody></table></figure><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"geci"</span>&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"lyric"</span> <span class="attr">v-for</span>=<span class="string">"(item, key, i) in geci2"</span> <span class="attr">:key</span>=<span class="string">"i"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          {{ item }}</span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>其中 ，<code>item </code>是歌词  <code>key</code>是时间</p></blockquote></li><li><p>实现歌词高亮</p></li></ol><p><code>ontimeupdate 事件在视频/音频（audio/video）当前的播放位置发送改变时触发</code></p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> audio = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">'audio'</span>) <span class="keyword">as</span> <span class="title class_">HTMLAudioElement</span>;</span><br><span class="line">   audio.<span class="property">ontimeupdate</span> = <span class="function">() =&gt;</span> {</span><br><span class="line">     <span class="comment">//将获取的时间转化成和歌词时间一样的格式</span></span><br><span class="line">     <span class="keyword">let</span> time = <span class="title function_">transTime</span>(audio.<span class="property">currentTime</span>);</span><br><span class="line">     <span class="keyword">if</span> (time <span class="keyword">in</span> obj) {</span><br><span class="line">       righttime.<span class="property">value</span> = time</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'success'</span>, righttime.<span class="property">value</span>);</span><br><span class="line">     } <span class="keyword">else</span> {</span><br><span class="line">       <span class="comment">// console.log('erro');</span></span><br><span class="line">     }</span><br></pre></td></tr></tbody></table></figure><p>==audio.currentTime==使用audio的currentTime属性获得当前的播放时间</p><p>用获取的时间与歌词列表里的时间匹配，并将匹配成攻的值赋给<code>righttime</code></p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"geci"</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"lyric"</span> <span class="attr">v-for</span>=<span class="string">"(item, key, i) in geci2"</span> <span class="attr">:key</span>=<span class="string">"i"</span> <span class="attr">:class</span>=<span class="string">"righttime == key ? 'highlight' : ' '"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          {{ item }}</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>根据<code>righttime 和 key值  的匹配结果</code> 动态添加高亮样式。</p><ol start="4"><li><p>歌词随播放时间滚动</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 歌词移动</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">lyricMove</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">  <span class="keyword">let</span> highlight = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">'highlight'</span>)[<span class="number">0</span>] <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span>;</span><br><span class="line">  <span class="keyword">const</span> geci = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">".geci"</span>) <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span>;</span><br><span class="line">  <span class="keyword">const</span> gecihezi = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">".gecihezi"</span>) <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span>;</span><br><span class="line">  <span class="keyword">if</span> (highlight) {</span><br><span class="line">    <span class="keyword">if</span> (highlight.<span class="property">offsetTop</span> &gt;= <span class="number">30</span>) {</span><br><span class="line">      <span class="comment">// 单句歌词距离顶部的距离 &gt; 30时，开始滚动</span></span><br><span class="line">      gecihezi.<span class="property">scrollTop</span> = highlight.<span class="property">offsetTop</span> - <span class="number">130</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="项目中遇到的问题"><a href="#项目中遇到的问题" class="headerlink" title="项目中遇到的问题"></a>项目中遇到的问题</h2><ol><li>使用官方推荐的获取url的方法时警告</li></ol><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio controls&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">source</span> <span class="attr">:src</span>=<span class="string">"` https://music.163.com/song/media/outer/url?id=${id}.mp3`"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-26_20-58-47.png"></p><p>​            <code>不影响实际项目运行！！</code></p><ol start="2"><li>vue3中的reactive响应式数据，不能直接复制</li></ol><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一:使用ref定义</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="title function_">ref</span>({})</span><br><span class="line">a.<span class="property">value</span>=数组或对象;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二：使用push()</span></span><br><span class="line"><span class="keyword">const</span> b=<span class="title function_">reactive</span>([])</span><br><span class="line">b.<span class="title function_">push</span>(...数组)</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法三：在reactive里面再封装一个{}</span></span><br><span class="line"><span class="keyword">const</span> c= <span class="title function_">reactive</span>({</span><br><span class="line">    <span class="attr">arr</span>:[]</span><br><span class="line">})</span><br><span class="line">c.<span class="property">arr</span>=数组或对象</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>不会处理ts产生的这种类型错误提醒（不影响项目运行）。</li></ol><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-27_18-37-38.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鸡鸡静听 1.0</title>
      <link href="/post/305ea91f.html"/>
      <url>/post/305ea91f.html</url>
      
        <content type="html"><![CDATA[<h2 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h2><p>解决目前鸡鸡静听存在的问题，加深对vue全家桶的理解</p><h2 id="目前存在的问题："><a href="#目前存在的问题：" class="headerlink" title="目前存在的问题："></a>目前存在的问题：</h2><ol><li>进入页面时，现有项目框架，某些板块图片第一时间不会出来</li><li>网易云api调用问题，大部分歌曲不能正常播放</li></ol><h2 id="还未实现的功能："><a href="#还未实现的功能：" class="headerlink" title="还未实现的功能："></a>还未实现的功能：</h2><ol><li>歌词的滚动</li><li>进度条拖拽</li></ol><h2 id="网易云接口"><a href="#网易云接口" class="headerlink" title="网易云接口"></a>网易云接口</h2><h3 id="部署到"><a href="#部署到" class="headerlink" title="部署到"></a>部署到</h3><p><a href="https://netease-cloud-music-api-pearl-five.vercel.app/">链接</a></p><h3 id="目前的使用"><a href="#目前的使用" class="headerlink" title="目前的使用"></a>目前的使用</h3><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入axios实例</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'../request/index'</span></span><br><span class="line"><span class="comment">// import request from './request';</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 歌曲搜索</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">SearchData</span> = (<span class="params">params: <span class="built_in">any</span></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`search?limit=20&amp;keywords=<span class="subst">${params}</span>`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 歌曲详情</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">GetSongDetail</span> = (<span class="params">id: <span class="built_in">any</span></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`/song/detail?ids=<span class="subst">${id}</span>`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 歌曲地址</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">GetSongUrl</span> = (<span class="params">id: <span class="built_in">any</span></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`/song/url?id=<span class="subst">${id}</span>`</span>)</span><br><span class="line"><span class="comment">// export const GetSongUrl = (id: any) =&gt; request.get(`https://music.163.com/song/media/outer/url?id=${id}.mp3`)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//检查歌曲是否可用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">CheckMusic</span> = (<span class="params">id: <span class="built_in">any</span></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`/check/music?id=<span class="subst">${id}</span>`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//新碟上新</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">NewMusic</span> = (<span class="params"></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`/top/album?offset=0&amp;limit=5&amp;year=2022&amp;month=4`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 轮播图</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Banner</span> = (<span class="params"></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`/banner?type=0`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐歌单</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Recommendplaylist</span> = (<span class="params"></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`/top/playlist`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取歌词</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">GetLyric</span> = (<span class="params">id: <span class="built_in">any</span></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`/lyric?id=<span class="subst">${id}</span>`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取歌曲评论</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">GetMusicComment</span> = (<span class="params">id: <span class="built_in">any</span></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`/comment/hot?type=0&amp;id=<span class="subst">${id}</span>`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取歌单歌曲</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">playlist</span> = (<span class="params">id: <span class="built_in">any</span></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`/ playlist/track/all?id=<span class="subst">${id}</span>`</span>)</span><br></pre></td></tr></tbody></table></figure><p>存在问题：部分歌曲无法播放</p><p><img src="D:\文档\桌面\typora\images\apieros.png"></p><p>解决办法：</p><p><code>**将 https://music.163.com/song/media/outer/url?id=id.mp3 以 src 赋予 Audio 即可播放</code>**</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio controls&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">source</span> <span class="attr">:src</span>=<span class="string">"` https://music.163.com/song/media/outer/url?id=${id}.mp3`"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><p>解决完某些音乐无法播放的问题后，出现了新的问题。</p><ol><li>新歌速递板块点进去后无法接受到id，并报错</li></ol><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-26_17-13-02.png" alt="Snipaste_2022-05-26_17-13-02"></p><ol start="2"><li>从音乐详情页面跳转至其他页面时，报错<br><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-26_17-14-22.png"></li></ol><h2 id="第一次构建项目，逻辑太过于混乱，因备考搁置了一断时间，更加看不懂了。"><a href="#第一次构建项目，逻辑太过于混乱，因备考搁置了一断时间，更加看不懂了。" class="headerlink" title="第一次构建项目，逻辑太过于混乱，因备考搁置了一断时间，更加看不懂了。"></a>第一次构建项目，逻辑太过于混乱，因备考搁置了一断时间，更加看不懂了。</h2>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vite中使用sass</title>
      <link href="/post/s27bfc3f.html"/>
      <url>/post/s27bfc3f.html</url>
      
        <content type="html"><![CDATA[<h1 id="sass在vite中的使用"><a href="#sass在vite中的使用" class="headerlink" title="sass在vite中的使用"></a>sass在vite中的使用</h1><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i sass -d</span><br></pre></td></tr></tbody></table></figure><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install sass-loader sass</span><br></pre></td></tr></tbody></table></figure><h3 id="查看package-json"><a href="#查看package-json" class="headerlink" title="查看package.json"></a>查看package.json</h3><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"devDependencies"</span>: {</span><br><span class="line">    .........</span><br><span class="line">   <span class="string">"sass"</span>: <span class="string">"^1.54.8"</span>,</span><br><span class="line">   <span class="string">"sass-loader"</span>: <span class="string">"^13.0.2"</span>,</span><br><span class="line">    .........</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><p>显示如图则为安装完成</p><h3 id="创建src-styles-main-scss文件"><a href="#创建src-styles-main-scss文件" class="headerlink" title="创建src/styles/main.scss文件"></a>创建src/styles/main.scss文件</h3><h3 id="配置-vite-config-js"><a href="#配置-vite-config-js" class="headerlink" title="配置 vite.config.js"></a>配置 vite.config.js</h3><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>({</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">css</span>: {</span><br><span class="line">    <span class="attr">preprocessorOptions</span>: {</span><br><span class="line">      <span class="attr">scss</span>: {</span><br><span class="line">        <span class="comment">// 两种方式都可以</span></span><br><span class="line">        <span class="attr">additionalData</span>: <span class="string">'@import "./src/styles/main.scss";'</span></span><br><span class="line">        <span class="comment">// additionalData: '@use "@/assets/scss/global.scss" as *;'</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>安装完成后可以自行测试</p><h3 id="需要注意的是"><a href="#需要注意的是" class="headerlink" title="需要注意的是~"></a><code>需要注意的是~</code></h3><p>在需要使用的vue组件处，style lang需写成scss ，而不是sass 否则会报错</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped lang=<span class="string">'scss'</span>&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 操作指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sass </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora基本使用</title>
      <link href="/post/a47bff3f.html"/>
      <url>/post/a47bff3f.html</url>
      
        <content type="html"><![CDATA[<h1 id="ctrl-1-一级标题"><a href="#ctrl-1-一级标题" class="headerlink" title="ctrl+1    一级标题"></a><code>ctrl+1</code>    一级标题</h1><h2 id="ctrl-2-二级标题"><a href="#ctrl-2-二级标题" class="headerlink" title="ctrl+2    二级标题"></a><code>ctrl+2</code>    二级标题</h2><h3 id="ctrl-3-三级标题"><a href="#ctrl-3-三级标题" class="headerlink" title="ctrl+3    三级标题"></a><code>ctrl+3</code>    三级标题</h3><h4 id="ctrl-4-四级标题"><a href="#ctrl-4-四级标题" class="headerlink" title="ctrl+4    四级标题"></a><code>ctrl+4</code>    四级标题</h4><h5 id="ctrl-5-五级标题"><a href="#ctrl-5-五级标题" class="headerlink" title="ctrl+5    五级标题"></a><code>ctrl+5</code>    五级标题</h5><h6 id="ctrl-6-六级标题"><a href="#ctrl-6-六级标题" class="headerlink" title="ctrl+6    六级标题"></a><code>ctrl+6</code>    六级标题</h6><p><code>ctrl+0</code>    正文</p><p><code>ctrl+b</code>    <strong>加粗</strong></p><p><code>ctrl+i</code>     <em>斜体</em></p><p><code>==需要高亮的文字==</code> ==高亮==</p><p><code>ctrl+shift+]</code> <code>或</code> <code>* + 空格</code>无序列表</p><ul><li><p>一级</p><ul><li><p>二级</p><ul><li>三级</li></ul></li><li><p>二级</p></li></ul></li><li><p>一级</p><blockquote><p><code>tab</code>    添加次级          或使用 <code>ctrl+[</code> <code>ctrl+]</code> 切换层级</p></blockquote></li></ul><p><code>ctrl+sgift+[</code> <code>或</code> <code>1.+ 空格</code> 有序列表</p><ol><li>有序列表不支持分层级</li><li>洒洒水水水水</li></ol><p><code>ctrl+shift+k</code>    代码块</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import  {} from ''</span><br></pre></td></tr></tbody></table></figure><p><code>ctrl+t</code>    表格</p><table><thead><tr><th align="center">1</th><th align="center">2</th><th align="center">3</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><blockquote><p><code> &gt;+空格</code> 我是引用 </p></blockquote><p><a href="%E7%BD%91%E5%9D%80">超链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 操作指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typora </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用VERCEL绑定自己域名？</title>
      <link href="/post/a47bfc3f.html"/>
      <url>/post/a47bfc3f.html</url>
      
        <content type="html"><![CDATA[<h1 id="如何使用VERCEL绑定自己域名？"><a href="#如何使用VERCEL绑定自己域名？" class="headerlink" title="如何使用VERCEL绑定自己域名？"></a>如何使用VERCEL绑定自己域名？</h1><p>==由于vercel提供的.app域名经常打不开，所以将其绑定我们自己的域名==</p><h5 id="1-首先，购买一个域名"><a href="#1-首先，购买一个域名" class="headerlink" title="1.首先，购买一个域名"></a>1.首先，购买一个域名</h5><p><code>此处选用阿里云购买域名</code></p><p>几块钱的就行，购买后完成实名认证。</p><h5 id="2-进入域名控制台，选择-域名列表"><a href="#2-进入域名控制台，选择-域名列表" class="headerlink" title="2.进入域名控制台，选择 域名列表"></a>2.进入域名控制台，选择 域名列表</h5><p>选择需要绑定的域名，点击<code>解析</code>  </p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-08-31_17-29-28.jpg"></p><p>点击添加记录，并将其修改为如图配置</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-08-31_17-35-59.png"></p><h5 id="3-再次返回域名列表，点击管理"><a href="#3-再次返回域名列表，点击管理" class="headerlink" title="3.再次返回域名列表，点击管理"></a>3.再次返回域名列表，点击管理</h5><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-08-31_17-38-23.png"></p><h5 id="4-点击修改DNS-修改服务器"><a href="#4-点击修改DNS-修改服务器" class="headerlink" title="4.点击修改DNS  -  修改服务器"></a>4.点击修改DNS  -  修改服务器</h5><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-08-31_17-39-35.png"></p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-08-31_17-43-40.png"></p><p>修改完后如图</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-08-31_17-45-46.png"></p><h5 id="5-打开vercel，选择你需要绑定域名的项目"><a href="#5-打开vercel，选择你需要绑定域名的项目" class="headerlink" title="5.打开vercel，选择你需要绑定域名的项目"></a>5.打开vercel，选择你需要绑定域名的项目</h5><p>选择settings</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-08-31_17-46-51.png"></p><p>选择Domains，添加域名网址，点击add</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-08-31_17-49-07.png"></p><p>等待一段时间即可</p>]]></content>
      
      
      <categories>
          
          <category> 操作指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vercel </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建</title>
      <link href="/post/9639fcc6.html"/>
      <url>/post/9639fcc6.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、Node-js"><a href="#一、Node-js" class="headerlink" title="一、Node.js"></a>一、Node.js</h2><p><a href="https://nodejs.org/en/">官网直接下载</a></p><h2 id="二、安装git"><a href="#二、安装git" class="headerlink" title="二、安装git"></a>二、安装git</h2><p><a href="https://git-scm.com/download/win">官网下载</a></p><h2 id="三、安装hexo"><a href="#三、安装hexo" class="headerlink" title="三、安装hexo"></a>三、安装hexo</h2><ol><li>用==管理员身份==打开命令行窗口</li></ol><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install -g hexo-cli</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>创建文件夹</li></ol><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> init myblog</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>进入到文件夹内，安装依赖</li></ol><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cd</span> myblog</span><br><span class="line">npm install</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>启动本地服务</li></ol><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> g </span><br><span class="line">hexo server</span><br></pre></td></tr></tbody></table></figure><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-29_15-48-41.png"></p><p>可以进入 <a href="http://localhost:4000/">http://localhost:4000/</a> 本地访问博客</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-29_15-54-44.png"></p><h2 id="四、部署到github"><a href="#四、部署到github" class="headerlink" title="四、部署到github"></a>四、部署到github</h2><h4 id="1-新建仓库（名字必须合规）"><a href="#1-新建仓库（名字必须合规）" class="headerlink" title="1.新建仓库（名字必须合规）"></a>1.新建仓库（名字必须合规）</h4><p>​                    仓库名限制：用户名+.github.io</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-29_16-02-40.png"></p><p><img src="D:\文档\桌面\typora\images\Snipaste_2022-05-29_16-05-13.png"></p><h4 id="2-命令行安装hexo-上传插件"><a href="#2-命令行安装hexo-上传插件" class="headerlink" title="2.命令行安装hexo 上传插件"></a>2.命令行安装hexo 上传插件</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></tbody></table></figure><h4 id="3-直接在文件夹里打开-config-yml"><a href="#3-直接在文件夹里打开-config-yml" class="headerlink" title="3.直接在文件夹里打开_config.yml"></a>3.直接在文件夹里打开<code>_config.yml</code></h4><p>找到最底部</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-29_16-12-36.png"></p><p> 修改为</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-29_16-15-47.png"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/2ws-w/2ws-w.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></tbody></table></figure><p>repo后为github仓库地址</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-29_16-14-31.png"></p><h4 id="4-推送站点到github"><a href="#4-推送站点到github" class="headerlink" title="4.推送站点到github"></a>4.推送站点到github</h4><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> d</span><br></pre></td></tr></tbody></table></figure><h4 id="5-刷新仓库即刻"><a href="#5-刷新仓库即刻" class="headerlink" title="5.刷新仓库即刻"></a>5.刷新仓库即刻</h4><h2 id="五、更换主题"><a href="#五、更换主题" class="headerlink" title="五、更换主题"></a>五、更换主题</h2><p>GitHub上搜索hexo主题或者hero自带的主题<a href="https://hexo.io/themes/%E3%80%82">https://hexo.io/themes/。</a></p><p>根据文档操作即可</p><p>一般是先将代码下载并解压到theme文件夹下</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-29_21-51-10.png"></p><p>博客及主题修改 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">参考</a></p>]]></content>
      
      
      <categories>
          
          <category> 操作指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue全家桶</title>
      <link href="/post/9ed18c6e.html"/>
      <url>/post/9ed18c6e.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://v3.cn.vuejs.org/">vue3官方文档</a></p><p>vite使用及创建项目</p><p><a href="https://vitejs.cn/">官方文档</a></p><p>使用npm</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vite@latest</span><br></pre></td></tr></tbody></table></figure><p>使用 Yarn</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn create vite</span><br></pre></td></tr></tbody></table></figure><p>使用 PNPM</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm create vite</span><br></pre></td></tr></tbody></table></figure><blockquote><p><em>根据提示即可</em></p></blockquote><h2 id="vue-router的使用"><a href="#vue-router的使用" class="headerlink" title="vue-router的使用"></a>vue-router的使用</h2><p><a href="https://router.vuejs.org/zh/guide/">官方文档</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用npm</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@4</span><br></pre></td></tr></tbody></table></figure><p>使用yarn</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add vue-router@4</span><br></pre></td></tr></tbody></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>==1.在src下新建    router/index.ts==</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { createRouter, createWebHashHistory, <span class="title class_">RouteRecordRaw</span> } <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; = [</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">path</span>: <span class="string">'/'</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">'组件名'</span>,</span><br><span class="line">        <span class="attr">redirect</span>: <span class="string">'/'</span> ,<span class="comment">//重定向</span></span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">'组件路径'</span>),</span><br><span class="line">        <span class="attr">children</span>:[{<span class="attr">path</span>:<span class="string">''</span>,<span class="attr">name</span>:<span class="string">''</span>,<span class="attr">components</span>:{}}]<span class="comment">//有子组件时</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">       <span class="attr">path</span>: <span class="string">'/'</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">'组件名'</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">'组件路径'</span>),</span><br><span class="line">    },</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>({</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    routes</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>==2.在main.ts中挂载使用== </p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">'#app'</span>)</span><br></pre></td></tr></tbody></table></figure><p>==3.router-link和router-view==</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用to='/路径'来指定链接 --&gt;</span><br><span class="line">&lt;router-link to="/"&gt;Go to sw&lt;/router-link&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- &nbsp;放到想要呈现路由的地方 --&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><h4 id="query传参"><a href="#query传参" class="headerlink" title="query传参"></a>query传参</h4><p>==在需要传参的组件中==</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> {useRouter } <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>();</span><br><span class="line"><span class="comment">// 传递参数,一般为button添加事件触发</span></span><br><span class="line"><span class="keyword">const</span> 事件名 = <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="comment">// 编程式跳转和传参</span></span><br><span class="line">  router.<span class="title function_">push</span>({</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/目标路径'</span>,</span><br><span class="line">    <span class="attr">query</span>: {</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">'这是路由传入的参数'</span></span><br><span class="line">    }</span><br><span class="line">  })</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>==在需要接收参数的组件中==</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { useRoute} <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span><br><span class="line"><span class="keyword">const</span> route=<span class="title function_">useRoute</span>()</span><br><span class="line"><span class="keyword">const</span> 接收变量名=route.<span class="property">query</span>.<span class="property">msg</span></span><br></pre></td></tr></tbody></table></figure><p>或者直接使用</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{route.query.msg}}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>一定要注意 router和route的区别！！</p><p><code>router传参</code>、<code>route接收</code></p></blockquote><h2 id="小菠萝Pinia"><a href="#小菠萝Pinia" class="headerlink" title="小菠萝Pinia"></a>小菠萝Pinia</h2><p><a href="https://pinia.web3doc.top/">小菠萝文档</a></p><h3 id="相比vuex的优势"><a href="#相比vuex的优势" class="headerlink" title="相比vuex的优势"></a>相比vuex的优势</h3><ol><li>Pinia 提供了一个更简单的 API，具有更少的规范</li><li>vue3</li><li>可以更好的兼容TypeScript </li></ol><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pinia</span><br></pre></td></tr></tbody></table></figure><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>==1.在main.ts挂载==</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { createPinia } <span class="keyword">from</span> <span class="string">'pinia'</span></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br></pre></td></tr></tbody></table></figure><p>==2.在src中创建容器文件夹store及index.ts==</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { defineStore } <span class="keyword">from</span> <span class="string">'pinia'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> 函数名 = <span class="title function_">defineStore</span>(<span class="string">'唯一id'</span>, {</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">           <span class="comment">//类似data</span></span><br><span class="line">            属性名<span class="number">1</span>：值,</span><br><span class="line">            属性名<span class="number">2</span>：值,</span><br><span class="line">            属性名<span class="number">3</span>：值,</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">getters</span>: {</span><br><span class="line">        <span class="comment">//类似computed</span></span><br><span class="line">        方法名(state){</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">            state.属性·······</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">actions</span>: {</span><br><span class="line">        <span class="comment">//类似methods</span></span><br><span class="line">        函数名(<span class="attr">state</span>: <span class="built_in">any</span>) {</span><br><span class="line">            state.属性 =······</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>==3.在需要使用的组件中==</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> {函数名} <span class="keyword">from</span> <span class="string">'../store.index.ts'</span></span><br><span class="line"><span class="keyword">const</span> mypinia=函数名()<span class="comment">//调用函数以实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//直接使用 例如</span></span><br><span class="line">mypinia.属性名  </span><br><span class="line">mypinia.方法名</span><br></pre></td></tr></tbody></table></figure><h3 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h3><ol><li><p>在使用的组件中更新   <code>$patch</code></p><blockquote><p>用 $patch 实现批量更新</p></blockquote><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">function</span>=(<span class="params"></span>)=&gt;{</span><br><span class="line">mypinia.$patch(<span class="function"><span class="params">state</span>=&gt;</span>{</span><br><span class="line">        state.属性<span class="number">1</span>++</span><br><span class="line">        state.属性<span class="number">2</span>=·····</span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>逻辑过多时可以封装到actions中</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在store/index.ts中</span></span><br><span class="line"><span class="attr">actions</span>:{</span><br><span class="line">    函数名(){</span><br><span class="line">        <span class="variable language_">this</span>.属性<span class="number">1</span>++</span><br><span class="line">        <span class="variable language_">this</span>.属性<span class="number">2</span>·····</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//同样可以使用$patch实现批量更新</span></span><br><span class="line"><span class="attr">actions</span>:{</span><br><span class="line">    函数名(){</span><br><span class="line">        <span class="variable language_">this</span>.$patch(<span class="function"><span class="params">state</span>=&gt;</span>{</span><br><span class="line">            state.属性<span class="number">1</span>++</span><br><span class="line">        state.属性<span class="number">2</span>=·····</span><br><span class="line">        })</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>使用时调用： <code>mypinia.函数名( )</code></p></blockquote></li></ol><h2 id="Element"><a href="#Element" class="headerlink" title="Element+"></a>Element+</h2><p><a href="https://element-plus.gitee.io/zh-CN/">官方文档</a></p><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-plus --save</span><br></pre></td></tr></tbody></table></figure><h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">'element-plus'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-plus/dist/index.css'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">ElementPlusIconsVue</span> <span class="keyword">from</span> <span class="string">'@element-plus/icons-vue'</span></span><br><span class="line"><span class="comment">// 注册所有图标</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, component] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(<span class="title class_">ElementPlusIconsVue</span>)) {</span><br><span class="line">    app.<span class="title function_">component</span>(key, component)</span><br><span class="line">}</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p><a href="http://www.axios-js.com/zh-cn/docs/">官方文档</a></p><h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></tbody></table></figure><h3 id="简易封装"><a href="#简易封装" class="headerlink" title="简易封装"></a>简易封装</h3><p>==创建http文件夹，并新建index.ts==</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="comment">//创建axios实例</span></span><br><span class="line"><span class="keyword">const</span> $http = axios.<span class="title function_">create</span>({</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">$http.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) {</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">}, <span class="keyword">function</span> (<span class="params">error</span>) {</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">$http.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) {</span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">    <span class="comment">//列如  return response.data 可以直接返回.data的值</span></span><br><span class="line">}, <span class="keyword">function</span> (<span class="params">error</span>) {</span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> $http</span><br></pre></td></tr></tbody></table></figure><p>==在新建一个文件夹apis，将所有用到的api封装于此==</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $http <span class="keyword">from</span> <span class="string">"../http/index"</span>;</span><br><span class="line"><span class="comment">// 获得本地json</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getBanner</span> = (<span class="params"></span>) =&gt; $http.<span class="title function_">get</span>(<span class="string">'/json/banner.json'</span>)</span><br><span class="line"><span class="comment">// 获得开源接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">GetSaying</span> = (<span class="params">id: <span class="built_in">number</span></span>) =&gt; $http.<span class="title function_">get</span>(<span class="string">`https://paul.ren/api/say`</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h3><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { <span class="title class_">GetSaying</span> } <span class="keyword">from</span> <span class="string">"../http/apis"</span>;</span><br><span class="line"><span class="keyword">const</span> saying = <span class="title function_">ref</span>();</span><br><span class="line"><span class="title function_">onMounted</span>(<span class="keyword">async</span> () =&gt; {</span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">GetSaying</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">     saying= res.<span class="property">data</span>;</span><br><span class="line">  });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 操作指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 发布文章的方法</title>
      <link href="/post/7a776471.html"/>
      <url>/post/7a776471.html</url>
      
        <content type="html"><![CDATA[<p>hexo 发布文章的方法</p><ol><li><p>命令行窗口<code>hexo new 文章名字</code></p></li><li><p>到<code>myblog\source\_posts</code>里编写</p></li><li><p>依次执行==hexo clean== &amp;&amp;==hexo g== &amp;&amp; ==hexo d==</p><p>为文章添加信息</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标题【必须】</span><br><span class="line">date: 日期【会自动生成】</span><br><span class="line">updated: 更新日期</span><br><span class="line">tags: 文章标签</span><br><span class="line">categories: 分类</span><br><span class="line">keywords: 关键字</span><br><span class="line">description: 描述</span><br><span class="line">top_img: 顶部图片</span><br><span class="line">comments:</span><br><span class="line">cover: 文章缩略图</span><br><span class="line">toc:</span><br><span class="line">toc_number:</span><br><span class="line">toc_style_simple:</span><br><span class="line">copyright:</span><br><span class="line">copyright_author: 文章作者</span><br><span class="line">copyright_author_href:</span><br><span class="line">copyright_url:</span><br><span class="line">copyright_info:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aplayer:</span><br><span class="line">highlight_shrink:</span><br><span class="line">aside: 侧边显示栏（默认为true）</span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure></li></ol><blockquote><p>注意冒号之后有空格</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 操作指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vercel </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于我</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h3 id="我的简历"><a href="#我的简历" class="headerlink" title="我的简历"></a>我的简历</h3><p> <code>https://www.f8vtra.icu/</code></p><p>巴拉巴拉~~~</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>archives</title>
      <link href="/archives/index.html"/>
      <url>/archives/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://cdn.cbd.int/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://cdn.cbd.int/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;}div#menus {    font-family: 'ZhuZiAYuanJWD';}h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;}a.article-title,a.blog-slider__title,a.categoryBar-list-link,h1.post-title {    font-family: ZhuZiAYuanJWD;}.iconfont {    font-family: 'iconfont' !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;}/* 时间轴生肖icon */svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;}.icon-zhongbiao::before {    color: #f7c768;}/* bilibli番剧插件 */.bangumi-active {    background: #dbecfe !important;    border-radius: 10px !important;}a.bangumi-tab:hover {    text-decoration: none !important;}.bangumi-button:hover {    background: #dbecfe !important;    border-radius: 10px !important;}a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;}.bangumi-button {    padding: 5px 10px !important;}a.bangumi-tab {    padding: 5px 10px !important;}svg.icon.faa-tada {    font-size: 1.1em;}/* 解决artitalk的图标问题 */#uploadSource&gt;svg {    width: 1.19em;    height: 1.5em;}/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */#page-header:not(.not-top-img):before {    background-color: transparent !important;}/* 首页文章卡片 */#recent-posts&gt;.recent-post-item {    background: rgba(255, 255, 255, 0.9);}/* 首页侧栏卡片 */#aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);}/* 文章页面正文背景 */div#post {    background: rgba(255, 255, 255, 0.9);}/* 分页页面 */div#page {    background: rgba(255, 255, 255, 0.9);}/* 归档页面 */div#archive {    background: rgba(255, 255, 255, 0.9);}/* 标签页面 */div#tag {    background: rgba(255, 255, 255, 0.9);}/* 分类页面 */div#category {    background: rgba(255, 255, 255, 0.9);}/*夜间模式伪类遮罩层透明*/[data-theme='dark'] #recent-posts&gt;.recent-post-item {    background: #121212;}[data-theme='dark'] .card-widget {    background: #121212 !important;}[data-theme='dark'] div#post {    background: #121212 !important;}[data-theme='dark'] div#tag {    background: #121212 !important;}[data-theme='dark'] div#archive {    background: #121212 !important;}[data-theme='dark'] div#page {    background: #121212 !important;}[data-theme='dark'] div#category {    background: #121212 !important;}[data-theme='dark'] div#category {    background: transparent !important;}/* 页脚透明 */#footer {    background: transparent !important;}/* 头图透明 */#page-header {    background: transparent !important;}#rightside&gt;div&gt;button {    border-radius: 5px;}/* 滚动条 */::-webkit-scrollbar {    width: 10px;    height: 10px;}::-webkit-scrollbar-thumb {    background-color: #49b1f5;    border-radius: 2em;}::-webkit-scrollbar-corner {    background-color: transparent;}::-moz-selection {    color: #fff;    background-color: #49b1f5;}/* 音乐播放器 *//* .aplayer .aplayer-lrc {  display: none !important;} */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}.aplayer.aplayer-fixed {    z-index: 999999 !important;}/* 评论框  */.vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;}/* 设置评论框 */.vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;}/* 鼠标图标 */body {    cursor: url('/img/x1.cur'), auto;}a,[type='button']:not(:disabled),[type='reset']:not(:disabled),[type='submit']:not(:disabled),button:not(:disabled) {    cursor: url('/img/x2.cur'), auto !important;}/* md网站下划线 */#article-container a:hover {    text-decoration: none !important;}#article-container #hpp_talk p img {    display: inline;}/* 404页面 */#error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);}#error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;}#error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #49b1f5;    background-position: center;    background-size: cover;}#error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft JhengHei', 'Microsoft YaHei', sans-serif;}#error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;}#error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;}#error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);}#body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;}#body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;}#body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;}#body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;}#body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--heo-card-bg);    display: flex;}#body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;}#body-wrap.error .aside-list .aside-list-item .content time {    display: none;}/* 代码框主题 */#article-container figure.highlight {    border-radius: 10px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
