<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>鸡鸡静听2.0 项目设计</title>
      <link href="/post/3ccadc1b.html"/>
      <url>/post/3ccadc1b.html</url>
      
        <content type="html"><![CDATA[<h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><h3 id="使用工具："><a href="#使用工具：" class="headerlink" title="使用工具："></a>使用工具：</h3><p><strong><code>typeScript+vue3+setup语法糖+vite</code></strong></p><h3 id="大概："><a href="#大概：" class="headerlink" title="大概："></a>大概：</h3><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-26_17-07-32.png"></p><h3 id="主要实现的功能："><a href="#主要实现的功能：" class="headerlink" title="主要实现的功能："></a>主要实现的功能：</h3><ol><li>音乐查找及播放</li><li>轮播图</li><li>新歌速递</li><li>推荐专辑</li><li>L显示热评</li></ol><h2 id="项目板块划分"><a href="#项目板块划分" class="headerlink" title="项目板块划分"></a>项目板块划分</h2><p><code>头部 header</code>      <code>中间（核心）=左边+右边</code>     <code>底部footer</code></p><ul><li><p> <code>发现音乐      FoundMusic</code></p></li><li><p>轮播图    LunBoTu</p></li><li><p>新歌速递     NewSongs</p></li><li><p>推荐歌单     RecommendPlaylist</p></li><li><p><code>搜索详情      Search</code> </p></li><li><p><code>音乐详情页   MusicDetail</code> </p></li></ul><h2 id="开始实操"><a href="#开始实操" class="headerlink" title="开始实操"></a>开始实操</h2><h3 id="1-1项目初始化"><a href="#1-1项目初始化" class="headerlink" title="1.1项目初始化"></a>1.1项目初始化</h3><p>axios<code>文件夹http</code>、pinia<code>文件夹store</code>、vue-router<code>文件夹router</code>、主要页面<code>文件夹vies</code>、element-plus、less</p><h3 id="1-2项目布局"><a href="#1-2项目布局" class="headerlink" title="1.2项目布局"></a>1.2项目布局</h3><ol><li>app中放置组件==<index>== 存放播放器</index></li><li><index>之中存放==<header>====<main>====<footer>==</footer></main></header></index></li><li>Main&gt;之中存放==<left>====<right>==</right></left></li></ol><h3 id="2-1-使用VERCEL部署网易云音乐api"><a href="#2-1-使用VERCEL部署网易云音乐api" class="headerlink" title="2.1 使用VERCEL部署网易云音乐api"></a>2.1 使用VERCEL部署网易云音乐api</h3><p><img src="C:\Users\22371\AppData\Roaming\Typora\typora-user-images\image-20220526194248771.png" alt="image-20220526194248771"></p><ol><li>先使用github账号登陆vercel   <a href="https://vercel.com/">链接</a></li><li>打开网易云api项目，点右上角fork <a href="https://github.com/2ws-w/">链接</a></li></ol><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220526194349513.png" alt="image-20220526194349513"></p><ol start="3"><li>在vercel新建项目</li></ol><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220526194413384.png"></p><ol start="3"><li>选择网易云api</li></ol><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220526194434359.png" alt="image-20220526194434359"></p><ol start="3"><li>名字自取，其他可以不改变，点击deploy</li></ol><ol start="3"><li><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/image-20220526194456591.png" alt="image-20220526194456591"></li></ol><p>6.完成</p><p><img src="C:\Users\22371\AppData\Roaming\Typora\typora-user-images\image-20220526194510636.png" alt="image-20220526194510636"></p><ol start="7"><li><a href="https://netease-cloud-music-api-pearl-five.vercel.app/">项目链接</a></li></ol><h3 id="3-1-搜索板块"><a href="#3-1-搜索板块" class="headerlink" title="3.1 搜索板块"></a>3.1 搜索板块</h3><ol><li>先调用网易云 api</li><li>检查输入框是否有内容，添加回车事件获取关键词<code>keyword</code></li><li>为列表添加点击事件，跳转到音乐详情页，并传入id参数</li></ol><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> keyword = <span class="title function_">ref</span>(<span class="string">' '</span>);</span><br><span class="line"><span class="keyword">let</span> keylist = <span class="title function_">reactive</span>(&lt;<span class="built_in">any</span>&gt;[]);</span><br><span class="line"><span class="keyword">const</span> id = <span class="title function_">ref</span>(<span class="string">'11'</span>);</span><br><span class="line"><span class="title function_">onMounted</span>(<span class="keyword">async</span> () =&gt; {</span><br><span class="line">    <span class="comment">// 传入keyword给 api,并用keylist存贮 获取列表</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">onSearch</span> = <span class="keyword">async</span> (<span class="params">id: <span class="built_in">any</span></span>) =&gt; {</span><br><span class="line">        <span class="keyword">await</span> <span class="title class_">SearchData</span>(keyword.<span class="property">value</span>)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>.<span class="property">result</span>.<span class="property">songs</span>);</span><br><span class="line">                keylist.<span class="title function_">splice</span>(<span class="number">0</span>);</span><br><span class="line">                keylist.<span class="title function_">push</span>(res.<span class="property">data</span>.<span class="property">result</span>.<span class="property">songs</span>);</span><br><span class="line">            })</span><br><span class="line">            .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> {</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">            });</span><br><span class="line">    };</span><br><span class="line">    <span class="comment">//先检查输入框是否有内容，若果有则渲染到页面上</span></span><br><span class="line">    <span class="comment">// 在设置回车事件，根据用户输入值更新页面</span></span><br><span class="line">    <span class="keyword">const</span> myinput = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">".serachInput"</span>) <span class="keyword">as</span> <span class="title class_">HTMLInputElement</span>;</span><br><span class="line">    keyword.<span class="property">value</span> = myinput.<span class="property">value</span></span><br><span class="line">    <span class="title function_">onSearch</span>(keyword.<span class="property">value</span>);</span><br><span class="line">    myinput.<span class="title function_">addEventListener</span>(<span class="string">"keydown"</span>, <span class="keyword">function</span> (<span class="params">e</span>) {</span><br><span class="line">        <span class="keyword">if</span> (e.<span class="property">key</span> == <span class="string">"Enter"</span>) {</span><br><span class="line">            <span class="comment">// 获取输入的值</span></span><br><span class="line">            <span class="comment">// const serachInput = document.querySelector(".serachInput") as HTMLInputElement;</span></span><br><span class="line">            keyword.<span class="property">value</span> = myinput.<span class="property">value</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(id.<span class="property">value</span>);</span><br><span class="line">            <span class="title function_">onSearch</span>(keyword.<span class="property">value</span>);</span><br><span class="line">            router.<span class="title function_">push</span>(<span class="string">'/Search'</span>)</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="3-2-音乐详情页"><a href="#3-2-音乐详情页" class="headerlink" title="3.2 音乐详情页"></a>3.2 音乐详情页</h3><h4 id="更新歌曲详情"><a href="#更新歌曲详情" class="headerlink" title="更新歌曲详情"></a>更新歌曲详情</h4><ol><li>接收传入的id参数</li><li>根据id调用api获取音乐详情</li><li>更新时间、歌词、歌手信息等</li></ol><h4 id="歌词"><a href="#歌词" class="headerlink" title="歌词"></a>歌词</h4><ol><li>使用网易云api获取的歌词是入图的形式，需要手动将时间和歌词分离</li></ol><p><img src="D:\文档\桌面\typora\images\Snipaste_2022-05-27_00-45-04.png"></p><ol start="2"><li><p>调用api获取歌词，并将时间与歌词文字拆离</p><figure class="highlight tex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const getgeci = () =&gt; {</span><br><span class="line">  GetLyric(id).then((res) =&gt; {</span><br><span class="line">    music.lyric = res.data.lrc.lyric</span><br><span class="line">    let obj = {}</span><br><span class="line">    let reg = /<span class="keyword">\[</span>(.*?)](.*)/g;</span><br><span class="line">    //使用正则表达式拆分</span><br><span class="line">    music.lyric.replace(reg, (a, b, c) =&gt; {</span><br><span class="line">      b = b.slice(0, 5)//时间取前4位便于计算</span><br><span class="line">      obj[b] = c;</span><br><span class="line">    })</span><br><span class="line">     // a是原数据，b是时间，c是歌词</span><br><span class="line">    geci2.value = obj;</span><br><span class="line">    console.log("geci2", geci2.value);</span><br><span class="line">  })</span><br></pre></td></tr></tbody></table></figure><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"geci"</span>&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"lyric"</span> <span class="attr">v-for</span>=<span class="string">"(item, key, i) in geci2"</span> <span class="attr">:key</span>=<span class="string">"i"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          {{ item }}</span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>其中 ，<code>item </code>是歌词  <code>key</code>是时间</p></blockquote></li><li><p>实现歌词高亮</p></li></ol><p><code>ontimeupdate 事件在视频/音频（audio/video）当前的播放位置发送改变时触发</code></p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> audio = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">'audio'</span>) <span class="keyword">as</span> <span class="title class_">HTMLAudioElement</span>;</span><br><span class="line">   audio.<span class="property">ontimeupdate</span> = <span class="function">() =&gt;</span> {</span><br><span class="line">     <span class="comment">//将获取的时间转化成和歌词时间一样的格式</span></span><br><span class="line">     <span class="keyword">let</span> time = <span class="title function_">transTime</span>(audio.<span class="property">currentTime</span>);</span><br><span class="line">     <span class="keyword">if</span> (time <span class="keyword">in</span> obj) {</span><br><span class="line">       righttime.<span class="property">value</span> = time</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'success'</span>, righttime.<span class="property">value</span>);</span><br><span class="line">     } <span class="keyword">else</span> {</span><br><span class="line">       <span class="comment">// console.log('erro');</span></span><br><span class="line">     }</span><br></pre></td></tr></tbody></table></figure><p>==audio.currentTime==使用audio的currentTime属性获得当前的播放时间</p><p>用获取的时间与歌词列表里的时间匹配，并将匹配成攻的值赋给<code>righttime</code></p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"geci"</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"lyric"</span> <span class="attr">v-for</span>=<span class="string">"(item, key, i) in geci2"</span> <span class="attr">:key</span>=<span class="string">"i"</span> <span class="attr">:class</span>=<span class="string">"righttime == key ? 'highlight' : ' '"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          {{ item }}</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>根据<code>righttime 和 key值  的匹配结果</code> 动态添加高亮样式。</p><ol start="4"><li><p>歌词随播放时间滚动</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 歌词移动</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">lyricMove</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">  <span class="keyword">let</span> highlight = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">'highlight'</span>)[<span class="number">0</span>] <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span>;</span><br><span class="line">  <span class="keyword">const</span> geci = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">".geci"</span>) <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span>;</span><br><span class="line">  <span class="keyword">const</span> gecihezi = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">".gecihezi"</span>) <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span>;</span><br><span class="line">  <span class="keyword">if</span> (highlight) {</span><br><span class="line">    <span class="keyword">if</span> (highlight.<span class="property">offsetTop</span> &gt;= <span class="number">30</span>) {</span><br><span class="line">      <span class="comment">// 单句歌词距离顶部的距离 &gt; 30时，开始滚动</span></span><br><span class="line">      gecihezi.<span class="property">scrollTop</span> = highlight.<span class="property">offsetTop</span> - <span class="number">130</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="项目中遇到的问题"><a href="#项目中遇到的问题" class="headerlink" title="项目中遇到的问题"></a>项目中遇到的问题</h2><ol><li>使用官方推荐的获取url的方法时警告</li></ol><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio controls&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">source</span> <span class="attr">:src</span>=<span class="string">"` https://music.163.com/song/media/outer/url?id=${id}.mp3`"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-26_20-58-47.png"></p><p>​            <code>不影响实际项目运行！！</code></p><ol start="2"><li>vue3中的reactive响应式数据，不能直接复制</li></ol><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一:使用ref定义</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="title function_">ref</span>({})</span><br><span class="line">a.<span class="property">value</span>=数组或对象;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二：使用push()</span></span><br><span class="line"><span class="keyword">const</span> b=<span class="title function_">reactive</span>([])</span><br><span class="line">b.<span class="title function_">push</span>(...数组)</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法三：在reactive里面再封装一个{}</span></span><br><span class="line"><span class="keyword">const</span> c= <span class="title function_">reactive</span>({</span><br><span class="line">    <span class="attr">arr</span>:[]</span><br><span class="line">})</span><br><span class="line">c.<span class="property">arr</span>=数组或对象</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>不会处理ts产生的这种类型错误提醒（不影响项目运行）。</li></ol><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-27_18-37-38.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鸡鸡静听 1.0</title>
      <link href="/post/305ea91f.html"/>
      <url>/post/305ea91f.html</url>
      
        <content type="html"><![CDATA[<h2 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h2><p>解决目前鸡鸡静听存在的问题，加深对vue全家桶的理解</p><h2 id="目前存在的问题："><a href="#目前存在的问题：" class="headerlink" title="目前存在的问题："></a>目前存在的问题：</h2><ol><li>进入页面时，现有项目框架，某些板块图片第一时间不会出来</li><li>网易云api调用问题，大部分歌曲不能正常播放</li></ol><h2 id="还未实现的功能："><a href="#还未实现的功能：" class="headerlink" title="还未实现的功能："></a>还未实现的功能：</h2><ol><li>歌词的滚动</li><li>进度条拖拽</li></ol><h2 id="网易云接口"><a href="#网易云接口" class="headerlink" title="网易云接口"></a>网易云接口</h2><h3 id="部署到"><a href="#部署到" class="headerlink" title="部署到"></a>部署到</h3><p><a href="https://netease-cloud-music-api-pearl-five.vercel.app/">链接</a></p><h3 id="目前的使用"><a href="#目前的使用" class="headerlink" title="目前的使用"></a>目前的使用</h3><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入axios实例</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'../request/index'</span></span><br><span class="line"><span class="comment">// import request from './request';</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 歌曲搜索</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">SearchData</span> = (<span class="params">params: <span class="built_in">any</span></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`search?limit=20&amp;keywords=<span class="subst">${params}</span>`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 歌曲详情</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">GetSongDetail</span> = (<span class="params">id: <span class="built_in">any</span></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`/song/detail?ids=<span class="subst">${id}</span>`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 歌曲地址</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">GetSongUrl</span> = (<span class="params">id: <span class="built_in">any</span></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`/song/url?id=<span class="subst">${id}</span>`</span>)</span><br><span class="line"><span class="comment">// export const GetSongUrl = (id: any) =&gt; request.get(`https://music.163.com/song/media/outer/url?id=${id}.mp3`)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//检查歌曲是否可用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">CheckMusic</span> = (<span class="params">id: <span class="built_in">any</span></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`/check/music?id=<span class="subst">${id}</span>`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//新碟上新</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">NewMusic</span> = (<span class="params"></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`/top/album?offset=0&amp;limit=5&amp;year=2022&amp;month=4`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 轮播图</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Banner</span> = (<span class="params"></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`/banner?type=0`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐歌单</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Recommendplaylist</span> = (<span class="params"></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`/top/playlist`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取歌词</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">GetLyric</span> = (<span class="params">id: <span class="built_in">any</span></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`/lyric?id=<span class="subst">${id}</span>`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取歌曲评论</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">GetMusicComment</span> = (<span class="params">id: <span class="built_in">any</span></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`/comment/hot?type=0&amp;id=<span class="subst">${id}</span>`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取歌单歌曲</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">playlist</span> = (<span class="params">id: <span class="built_in">any</span></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`/ playlist/track/all?id=<span class="subst">${id}</span>`</span>)</span><br></pre></td></tr></tbody></table></figure><p>存在问题：部分歌曲无法播放</p><p><img src="D:\文档\桌面\typora\images\apieros.png"></p><p>解决办法：</p><p><code>**将 https://music.163.com/song/media/outer/url?id=id.mp3 以 src 赋予 Audio 即可播放</code>**</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio controls&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">source</span> <span class="attr">:src</span>=<span class="string">"` https://music.163.com/song/media/outer/url?id=${id}.mp3`"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><p>解决完某些音乐无法播放的问题后，出现了新的问题。</p><ol><li>新歌速递板块点进去后无法接受到id，并报错</li></ol><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-26_17-13-02.png" alt="Snipaste_2022-05-26_17-13-02"></p><ol start="2"><li>从音乐详情页面跳转至其他页面时，报错<br><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-26_17-14-22.png"></li></ol><h2 id="第一次构建项目，逻辑太过于混乱，因备考搁置了一断时间，更加看不懂了。"><a href="#第一次构建项目，逻辑太过于混乱，因备考搁置了一断时间，更加看不懂了。" class="headerlink" title="第一次构建项目，逻辑太过于混乱，因备考搁置了一断时间，更加看不懂了。"></a>第一次构建项目，逻辑太过于混乱，因备考搁置了一断时间，更加看不懂了。</h2>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>占位文章</title>
      <link href="/post/a47bfc3f.html"/>
      <url>/post/a47bfc3f.html</url>
      
        <content type="html"><![CDATA[<h1 id="占位用的文章"><a href="#占位用的文章" class="headerlink" title="占位用的文章"></a>占位用的文章</h1><p>==暂时还没有内容！==</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>占位文章</title>
      <link href="/post/a47bfc3f.html"/>
      <url>/post/a47bfc3f.html</url>
      
        <content type="html"><![CDATA[<h1 id="占位用的文章"><a href="#占位用的文章" class="headerlink" title="占位用的文章"></a>占位用的文章</h1><p>==暂时还没有内容！==</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/wallhaven-6o66kq.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 空白 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> space </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>占位文章</title>
      <link href="/post/a47bfc3f.html"/>
      <url>/post/a47bfc3f.html</url>
      
        <content type="html"><![CDATA[<h1 id="占位用的文章"><a href="#占位用的文章" class="headerlink" title="占位用的文章"></a>占位用的文章</h1><p>==暂时还没有内容！==</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/wallhaven-9mpwwd.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>占位文章</title>
      <link href="/post/a47bfc3f.html"/>
      <url>/post/a47bfc3f.html</url>
      
        <content type="html"><![CDATA[<h1 id="占位用的文章"><a href="#占位用的文章" class="headerlink" title="占位用的文章"></a>占位用的文章</h1><p>==暂时还没有内容！==</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/wallhaven-dpyrxo.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 空白 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> space </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>占位文章</title>
      <link href="/post/a47bfc3f.html"/>
      <url>/post/a47bfc3f.html</url>
      
        <content type="html"><![CDATA[<h1 id="占位用的文章"><a href="#占位用的文章" class="headerlink" title="占位用的文章"></a>占位用的文章</h1><p>==暂时还没有内容！==</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/wallhaven-1kyev3.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 空白 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> space </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建</title>
      <link href="/post/9639fcc6.html"/>
      <url>/post/9639fcc6.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、Node-js"><a href="#一、Node-js" class="headerlink" title="一、Node.js"></a>一、Node.js</h2><p><a href="https://nodejs.org/en/">官网直接下载</a></p><h2 id="二、安装git"><a href="#二、安装git" class="headerlink" title="二、安装git"></a>二、安装git</h2><p><a href="https://git-scm.com/download/win">官网下载</a></p><h2 id="三、安装hexo"><a href="#三、安装hexo" class="headerlink" title="三、安装hexo"></a>三、安装hexo</h2><ol><li>用==管理员身份==打开命令行窗口</li></ol><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install -g hexo-cli</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>创建文件夹</li></ol><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> init myblog</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>进入到文件夹内，安装依赖</li></ol><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cd</span> myblog</span><br><span class="line">npm install</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>启动本地服务</li></ol><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> g </span><br><span class="line">hexo server</span><br></pre></td></tr></tbody></table></figure><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-29_15-48-41.png"></p><p>可以进入 <a href="http://localhost:4000/">http://localhost:4000/</a> 本地访问博客</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-29_15-54-44.png"></p><h2 id="四、部署到github"><a href="#四、部署到github" class="headerlink" title="四、部署到github"></a>四、部署到github</h2><h4 id="1-新建仓库（名字必须合规）"><a href="#1-新建仓库（名字必须合规）" class="headerlink" title="1.新建仓库（名字必须合规）"></a>1.新建仓库（名字必须合规）</h4><p>​                    仓库名限制：用户名+.github.io</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-29_16-02-40.png"></p><p><img src="D:\文档\桌面\typora\images\Snipaste_2022-05-29_16-05-13.png"></p><h4 id="2-命令行安装hexo-上传插件"><a href="#2-命令行安装hexo-上传插件" class="headerlink" title="2.命令行安装hexo 上传插件"></a>2.命令行安装hexo 上传插件</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></tbody></table></figure><h4 id="3-直接在文件夹里打开-config-yml"><a href="#3-直接在文件夹里打开-config-yml" class="headerlink" title="3.直接在文件夹里打开_config.yml"></a>3.直接在文件夹里打开<code>_config.yml</code></h4><p>找到最底部</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-29_16-12-36.png"></p><p> 修改为</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-29_16-15-47.png"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/2ws-w/2ws-w.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></tbody></table></figure><p>repo后为github仓库地址</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-29_16-14-31.png"></p><h4 id="4-推送站点到github"><a href="#4-推送站点到github" class="headerlink" title="4.推送站点到github"></a>4.推送站点到github</h4><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> d</span><br></pre></td></tr></tbody></table></figure><h4 id="5-刷新仓库即刻"><a href="#5-刷新仓库即刻" class="headerlink" title="5.刷新仓库即刻"></a>5.刷新仓库即刻</h4><h2 id="五、更换主题"><a href="#五、更换主题" class="headerlink" title="五、更换主题"></a>五、更换主题</h2><p>GitHub上搜索hexo主题或者hero自带的主题<a href="https://hexo.io/themes/%E3%80%82">https://hexo.io/themes/。</a></p><p>根据文档操作即可</p><p>一般是先将代码下载并解压到theme文件夹下</p><p><img src="https://zmxj-typora.oss-cn-hangzhou.aliyuncs.com/Snipaste_2022-05-29_21-51-10.png"></p><p>博客及主题修改 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">参考</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue全家桶</title>
      <link href="/post/9ed18c6e.html"/>
      <url>/post/9ed18c6e.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://v3.cn.vuejs.org/">vue3官方文档</a></p><p>vite使用及创建项目</p><p><a href="https://vitejs.cn/">官方文档</a></p><p>使用npm</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vite@latest</span><br></pre></td></tr></tbody></table></figure><p>使用 Yarn</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn create vite</span><br></pre></td></tr></tbody></table></figure><p>使用 PNPM</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm create vite</span><br></pre></td></tr></tbody></table></figure><blockquote><p><em>根据提示即可</em></p></blockquote><h2 id="vue-router的使用"><a href="#vue-router的使用" class="headerlink" title="vue-router的使用"></a>vue-router的使用</h2><p><a href="https://router.vuejs.org/zh/guide/">官方文档</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用npm</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@4</span><br></pre></td></tr></tbody></table></figure><p>使用yarn</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add vue-router@4</span><br></pre></td></tr></tbody></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>==1.在src下新建    router/index.ts==</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { createRouter, createWebHashHistory, <span class="title class_">RouteRecordRaw</span> } <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; = [</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">path</span>: <span class="string">'/'</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">'组件名'</span>,</span><br><span class="line">        <span class="attr">redirect</span>: <span class="string">'/'</span> ,<span class="comment">//重定向</span></span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">'组件路径'</span>),</span><br><span class="line">        <span class="attr">children</span>:[{<span class="attr">path</span>:<span class="string">''</span>,<span class="attr">name</span>:<span class="string">''</span>,<span class="attr">components</span>:{}}]<span class="comment">//有子组件时</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">       <span class="attr">path</span>: <span class="string">'/'</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">'组件名'</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">'组件路径'</span>),</span><br><span class="line">    },</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>({</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    routes</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>==2.在main.ts中挂载使用== </p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">'#app'</span>)</span><br></pre></td></tr></tbody></table></figure><p>==3.router-link和router-view==</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用to='/路径'来指定链接 --&gt;</span><br><span class="line">&lt;router-link to="/"&gt;Go to sw&lt;/router-link&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- &nbsp;放到想要呈现路由的地方 --&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><h4 id="query传参"><a href="#query传参" class="headerlink" title="query传参"></a>query传参</h4><p>==在需要传参的组件中==</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> {useRouter } <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>();</span><br><span class="line"><span class="comment">// 传递参数,一般为button添加事件触发</span></span><br><span class="line"><span class="keyword">const</span> 事件名 = <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="comment">// 编程式跳转和传参</span></span><br><span class="line">  router.<span class="title function_">push</span>({</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/目标路径'</span>,</span><br><span class="line">    <span class="attr">query</span>: {</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">'这是路由传入的参数'</span></span><br><span class="line">    }</span><br><span class="line">  })</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>==在需要接收参数的组件中==</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { useRoute} <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span><br><span class="line"><span class="keyword">const</span> route=<span class="title function_">useRoute</span>()</span><br><span class="line"><span class="keyword">const</span> 接收变量名=route.<span class="property">query</span>.<span class="property">msg</span></span><br></pre></td></tr></tbody></table></figure><p>或者直接使用</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{route.query.msg}}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>一定要注意 router和route的区别！！</p><p><code>router传参</code>、<code>route接收</code></p></blockquote><h2 id="小菠萝Pinia"><a href="#小菠萝Pinia" class="headerlink" title="小菠萝Pinia"></a>小菠萝Pinia</h2><p><a href="https://pinia.web3doc.top/">小菠萝文档</a></p><h3 id="相比vuex的优势"><a href="#相比vuex的优势" class="headerlink" title="相比vuex的优势"></a>相比vuex的优势</h3><ol><li>Pinia 提供了一个更简单的 API，具有更少的规范</li><li>vue3</li><li>可以更好的兼容TypeScript </li></ol><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pinia</span><br></pre></td></tr></tbody></table></figure><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>==1.在main.ts挂载==</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { createPinia } <span class="keyword">from</span> <span class="string">'pinia'</span></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br></pre></td></tr></tbody></table></figure><p>==2.在src中创建容器文件夹store及index.ts==</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { defineStore } <span class="keyword">from</span> <span class="string">'pinia'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> 函数名 = <span class="title function_">defineStore</span>(<span class="string">'唯一id'</span>, {</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">           <span class="comment">//类似data</span></span><br><span class="line">            属性名<span class="number">1</span>：值,</span><br><span class="line">            属性名<span class="number">2</span>：值,</span><br><span class="line">            属性名<span class="number">3</span>：值,</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">getters</span>: {</span><br><span class="line">        <span class="comment">//类似computed</span></span><br><span class="line">        方法名(state){</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">            state.属性·······</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">actions</span>: {</span><br><span class="line">        <span class="comment">//类似methods</span></span><br><span class="line">        函数名(<span class="attr">state</span>: <span class="built_in">any</span>) {</span><br><span class="line">            state.属性 =······</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>==3.在需要使用的组件中==</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> {函数名} <span class="keyword">from</span> <span class="string">'../store.index.ts'</span></span><br><span class="line"><span class="keyword">const</span> mypinia=函数名()<span class="comment">//调用函数以实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//直接使用 例如</span></span><br><span class="line">mypinia.属性名  </span><br><span class="line">mypinia.方法名</span><br></pre></td></tr></tbody></table></figure><h3 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h3><ol><li><p>在使用的组件中更新   <code>$patch</code></p><blockquote><p>用 $patch 实现批量更新</p></blockquote><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">function</span>=(<span class="params"></span>)=&gt;{</span><br><span class="line">mypinia.$patch(<span class="function"><span class="params">state</span>=&gt;</span>{</span><br><span class="line">        state.属性<span class="number">1</span>++</span><br><span class="line">        state.属性<span class="number">2</span>=·····</span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>逻辑过多时可以封装到actions中</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在store/index.ts中</span></span><br><span class="line"><span class="attr">actions</span>:{</span><br><span class="line">    函数名(){</span><br><span class="line">        <span class="variable language_">this</span>.属性<span class="number">1</span>++</span><br><span class="line">        <span class="variable language_">this</span>.属性<span class="number">2</span>·····</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//同样可以使用$patch实现批量更新</span></span><br><span class="line"><span class="attr">actions</span>:{</span><br><span class="line">    函数名(){</span><br><span class="line">        <span class="variable language_">this</span>.$patch(<span class="function"><span class="params">state</span>=&gt;</span>{</span><br><span class="line">            state.属性<span class="number">1</span>++</span><br><span class="line">        state.属性<span class="number">2</span>=·····</span><br><span class="line">        })</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>使用时调用： <code>mypinia.函数名( )</code></p></blockquote></li></ol><h2 id="Element"><a href="#Element" class="headerlink" title="Element+"></a>Element+</h2><p><a href="https://element-plus.gitee.io/zh-CN/">官方文档</a></p><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-plus --save</span><br></pre></td></tr></tbody></table></figure><h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">'element-plus'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-plus/dist/index.css'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">ElementPlusIconsVue</span> <span class="keyword">from</span> <span class="string">'@element-plus/icons-vue'</span></span><br><span class="line"><span class="comment">// 注册所有图标</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, component] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(<span class="title class_">ElementPlusIconsVue</span>)) {</span><br><span class="line">    app.<span class="title function_">component</span>(key, component)</span><br><span class="line">}</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p><a href="http://www.axios-js.com/zh-cn/docs/">官方文档</a></p><h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></tbody></table></figure><h3 id="简易封装"><a href="#简易封装" class="headerlink" title="简易封装"></a>简易封装</h3><p>==创建http文件夹，并新建index.ts==</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="comment">//创建axios实例</span></span><br><span class="line"><span class="keyword">const</span> $http = axios.<span class="title function_">create</span>({</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">$http.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) {</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">}, <span class="keyword">function</span> (<span class="params">error</span>) {</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">$http.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) {</span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">    <span class="comment">//列如  return response.data 可以直接返回.data的值</span></span><br><span class="line">}, <span class="keyword">function</span> (<span class="params">error</span>) {</span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> $http</span><br></pre></td></tr></tbody></table></figure><p>==在新建一个文件夹apis，将所有用到的api封装于此==</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $http <span class="keyword">from</span> <span class="string">"../http/index"</span>;</span><br><span class="line"><span class="comment">// 获得本地json</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getBanner</span> = (<span class="params"></span>) =&gt; $http.<span class="title function_">get</span>(<span class="string">'/json/banner.json'</span>)</span><br><span class="line"><span class="comment">// 获得开源接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">GetSaying</span> = (<span class="params">id: <span class="built_in">number</span></span>) =&gt; $http.<span class="title function_">get</span>(<span class="string">`https://paul.ren/api/say`</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h3><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { <span class="title class_">GetSaying</span> } <span class="keyword">from</span> <span class="string">"../http/apis"</span>;</span><br><span class="line"><span class="keyword">const</span> saying = <span class="title function_">ref</span>();</span><br><span class="line"><span class="title function_">onMounted</span>(<span class="keyword">async</span> () =&gt; {</span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">GetSaying</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">     saying= res.<span class="property">data</span>;</span><br><span class="line">  });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 发布文章的方法</title>
      <link href="/post/7a776471.html"/>
      <url>/post/7a776471.html</url>
      
        <content type="html"><![CDATA[<p>hexo 发布文章的方法</p><ol><li><p>命令行窗口<code>hexo new 文章名字</code></p></li><li><p>到<code>myblog\source\_posts</code>里编写</p></li><li><p>依次执行==hexo clean== &amp;&amp;==hexo g== &amp;&amp; ==hexo d==</p><p>为文章添加信息</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标题【必须】</span><br><span class="line">date: 日期【会自动生成】</span><br><span class="line">updated: 更新日期</span><br><span class="line">tags: 文章标签</span><br><span class="line">categories: 分类</span><br><span class="line">keywords: 关键字</span><br><span class="line">description: 描述</span><br><span class="line">top_img: 顶部图片</span><br><span class="line">comments:</span><br><span class="line">cover: 文章缩略图</span><br><span class="line">toc:</span><br><span class="line">toc_number:</span><br><span class="line">toc_style_simple:</span><br><span class="line">copyright:</span><br><span class="line">copyright_author: 文章作者</span><br><span class="line">copyright_author_href:</span><br><span class="line">copyright_url:</span><br><span class="line">copyright_info:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aplayer:</span><br><span class="line">highlight_shrink:</span><br><span class="line">aside: 侧边显示栏（默认为true）</span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure></li></ol><blockquote><p>注意冒号之后有空格</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>archives</title>
      <link href="/archives/index.html"/>
      <url>/archives/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://cdn.cbd.int/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://cdn.cbd.int/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;}div#menus {    font-family: 'ZhuZiAYuanJWD';}h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;}a.article-title,a.blog-slider__title,a.categoryBar-list-link,h1.post-title {    font-family: ZhuZiAYuanJWD;}.iconfont {    font-family: 'iconfont' !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;}/* 时间轴生肖icon */svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;}.icon-zhongbiao::before {    color: #f7c768;}/* bilibli番剧插件 */.bangumi-active {    background: #dbecfe !important;    border-radius: 10px !important;}a.bangumi-tab:hover {    text-decoration: none !important;}.bangumi-button:hover {    background: #dbecfe !important;    border-radius: 10px !important;}a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;}.bangumi-button {    padding: 5px 10px !important;}a.bangumi-tab {    padding: 5px 10px !important;}svg.icon.faa-tada {    font-size: 1.1em;}/* 解决artitalk的图标问题 */#uploadSource&gt;svg {    width: 1.19em;    height: 1.5em;}/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */#page-header:not(.not-top-img):before {    background-color: transparent !important;}/* 首页文章卡片 */#recent-posts&gt;.recent-post-item {    background: rgba(255, 255, 255, 0.9);}/* 首页侧栏卡片 */#aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);}/* 文章页面正文背景 */div#post {    background: rgba(255, 255, 255, 0.9);}/* 分页页面 */div#page {    background: rgba(255, 255, 255, 0.9);}/* 归档页面 */div#archive {    background: rgba(255, 255, 255, 0.9);}/* 标签页面 */div#tag {    background: rgba(255, 255, 255, 0.9);}/* 分类页面 */div#category {    background: rgba(255, 255, 255, 0.9);}/*夜间模式伪类遮罩层透明*/[data-theme='dark'] #recent-posts&gt;.recent-post-item {    background: #121212;}[data-theme='dark'] .card-widget {    background: #121212 !important;}[data-theme='dark'] div#post {    background: #121212 !important;}[data-theme='dark'] div#tag {    background: #121212 !important;}[data-theme='dark'] div#archive {    background: #121212 !important;}[data-theme='dark'] div#page {    background: #121212 !important;}[data-theme='dark'] div#category {    background: #121212 !important;}[data-theme='dark'] div#category {    background: transparent !important;}/* 页脚透明 */#footer {    background: transparent !important;}/* 头图透明 */#page-header {    background: transparent !important;}#rightside&gt;div&gt;button {    border-radius: 5px;}/* 滚动条 */::-webkit-scrollbar {    width: 10px;    height: 10px;}::-webkit-scrollbar-thumb {    background-color: #49b1f5;    border-radius: 2em;}::-webkit-scrollbar-corner {    background-color: transparent;}::-moz-selection {    color: #fff;    background-color: #49b1f5;}/* 音乐播放器 *//* .aplayer .aplayer-lrc {  display: none !important;} */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}.aplayer.aplayer-fixed {    z-index: 999999 !important;}/* 评论框  */.vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;}/* 设置评论框 */.vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;}/* 鼠标图标 */body {    cursor: url('/img/x1.cur'), auto;}a,[type='button']:not(:disabled),[type='reset']:not(:disabled),[type='submit']:not(:disabled),button:not(:disabled) {    cursor: url('/img/x2.cur'), auto !important;}/* md网站下划线 */#article-container a:hover {    text-decoration: none !important;}#article-container #hpp_talk p img {    display: inline;}/* 404页面 */#error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);}#error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;}#error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #49b1f5;    background-position: center;    background-size: cover;}#error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft JhengHei', 'Microsoft YaHei', sans-serif;}#error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;}#error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;}#error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);}#body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;}#body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;}#body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;}#body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;}#body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--heo-card-bg);    display: flex;}#body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;}#body-wrap.error .aside-list .aside-list-item .content time {    display: none;}/* 代码框主题 */#article-container figure.highlight {    border-radius: 10px;}]]></content>
      
    </entry>
    
    
  
</search>
